# QLNHATRO/controller/LoginRegister/OTPController.py
from PyQt5.QtWidgets import QMessageBox

from QLNHATRO.RentalManagementApplication.frontend.Component.ErrorDialog import ErrorDialog


class OTPController:
    @staticmethod
    def verify_otp(otp_text, username, view):
        if len(otp_text) != 4:
            ErrorDialog.show_error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªß 4 ch·ªØ s·ªë c·ªßa m√£ OTP.", view)
            return

        # TODO: N·∫øu c√≥ x√°c th·ª±c th·ª±c t·∫ø => g·ªçi OTPService.verify_otp()
        print(f"‚úÖ OTP x√°c nh·∫≠n: {otp_text}")
        view.timer.stop()
        from QLNHATRO.RentalManagementApplication.frontend.views.Login_Register.ResetPasswordView import \
            ResetPasswordView
        view.reset_password_view = ResetPasswordView(username=username)
        view.hide()
        view.reset_password_view.show()

    @staticmethod
    def resend_otp(username, email, view):
        print(f"üîÑ G·ª≠i l·∫°i OTP cho {email}")
        view.reset_otp_fields()

    def go_to_reset_password(self):
        from QLNHATRO.RentalManagementApplication.frontend.views.Login_Register.ResetPasswordView import \
            ResetPasswordView


    @staticmethod
    def request_initial_otp(username: str, email: str):
        """
        Y√™u c·∫ßu backend g·ª≠i m√£ OTP ban ƒë·∫ßu.
        Tr·∫£ v·ªÅ (bool: success, str: message)
        """
        print(f"OTPController: Y√™u c·∫ßu g·ª≠i OTP ban ƒë·∫ßu cho username '{username}', email '{email}'.")
        # --- LOGIC G·ªåI BACKEND/SERVICE ƒê·ªÇ G·ª¨I OTP BAN ƒê·∫¶U ---
        # V√≠ d·ª•:
        # from your_project.services import AuthService
        # success, message = AuthService.request_otp_for_password_reset(username, email)
        # Gi·∫£ l·∫≠p k·∫øt qu·∫£:
        if username and email:
            print(f"OTPController: Gi·∫£ l·∫≠p g·ª≠i OTP th√†nh c√¥ng ƒë·∫øn {email}.")
            return True, f"M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn {email}."
        else:
            return False, "Thi·∫øu th√¥ng tin username ho·∫∑c email."
        # --- K·∫æT TH√öC LOGIC G·ªåI BACKEND/SERVICE ---
'''
    @staticmethod
    def verify_otp(otp_code: str, username: str, view_instance: 'OTPVerificationView'):
        """
        X√°c minh m√£ OTP.
        view_instance l√† instance c·ªßa OTPVerificationView.
        """
        print(f"OTPController: X√°c minh OTP '{otp_code}' cho username '{username}'.")
        # --- LOGIC G·ªåI BACKEND/SERVICE ƒê·ªÇ X√ÅC MINH OTP ---
        # V√≠ d·ª•:
        # from your_project.services import AuthService
        # success, message = AuthService.verify_otp_for_password_reset(username, otp_code)

        # Gi·∫£ l·∫≠p k·∫øt qu·∫£ t·ª´ backend:
        # ƒê·ªÉ test, OTP ƒë√∫ng l√† "1234"
        if username and otp_code == "1234":
            success = True
            message = "X√°c minh OTP th√†nh c√¥ng!"
        elif not username:
            success = False
            message = "L·ªói: Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng."
        else:
            success = False
            message = "M√£ OTP kh√¥ng ch√≠nh x√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n."
        # --- K·∫æT TH√öC LOGIC G·ªåI BACKEND/SERVICE ---

        if success:
            if hasattr(view_instance, 'on_otp_verification_success'):
                view_instance.on_otp_verification_success()
        else:
            if hasattr(view_instance, 'on_otp_verification_failure'):
                view_instance.on_otp_verification_failure(message)

    @staticmethod
    def resend_otp(username: str, email: str, view_instance: 'OTPVerificationView'):
        """
        Y√™u c·∫ßu g·ª≠i l·∫°i m√£ OTP.
        """
        print(f"OTPController: Y√™u c·∫ßu g·ª≠i l·∫°i OTP cho username '{username}', email '{email}'.")
        # --- LOGIC G·ªåI BACKEND/SERVICE ƒê·ªÇ G·ª¨I L·∫†I OTP ---
        # V√≠ d·ª•:
        # success_resend, message_resend = AuthService.resend_otp_for_password_reset(username, email)

        # Gi·∫£ l·∫≠p k·∫øt qu·∫£:
        success_resend = True
        message_resend = f"M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn {email}."
        # --- K·∫æT TH√öC LOGIC G·ªåI BACKEND/SERVICE ---

        if success_resend:
            QMessageBox.information(view_instance, "ƒê√£ g·ª≠i l·∫°i OTP", message_resend)
            # view_instance ƒë√£ t·ª± x·ª≠ l√Ω vi·ªác reset timer v√† fields
        else:
            QMessageBox.warning(view_instance, "L·ªói g·ª≠i l·∫°i OTP", message_resend)
'''