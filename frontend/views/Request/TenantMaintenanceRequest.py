from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QTextEdit, QPushButton, QFileDialog,
    QHBoxLayout, QMessageBox, QGroupBox, QComboBox, QDateEdit, QLineEdit,
    QFormLayout, QSplitter, QFrame, QGridLayout, QScrollArea
)
from PyQt5.QtGui import QPixmap, QFont, QIcon
from PyQt5.QtCore import Qt, QDate
import os


class TenantMaintenanceRequest(QWidget):
    def __init__(self, main_window, tenant_id):
        super().__init__()
        self.main_window = main_window
        self.tenant_id = tenant_id
        self.room_id = self.get_room_id_for_tenant(tenant_id)
        self.image_path = None

        # Thi·∫øt l·∫≠p c·ª≠a s·ªï
        self.setWindowTitle("Y√™u C·∫ßu S·ª≠a Ch·ªØa")
        self.setMinimumSize(800, 600)
        self.setStyleSheet("""
            QWidget { 
                background-color: #FF7F7F; 
                font-family: 'Segoe UI', Arial; 
            }
            QGroupBox {
                border: 1px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 1ex;
                font-weight: bold;
                background-color: #f0f0f0;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
            QPushButton {
                background-color: #3498db;
                color: white;
                border-radius: 5px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton#resetBtn {
                background-color: #e74c3c;
            }
            QPushButton#resetBtn:hover {
                background-color: #c0392b;
            }
            QTextEdit, QComboBox, QLineEdit, QDateEdit {
                border: 1px solid #bdc3c7;
                border-radius: 4px;
                padding: 8px;
                background-color: white;
            }
            QLabel#titleLabel {
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
                padding: 10px;
                background-color: #f0f0f0;
                border-radius: 5px;
            }
            QLabel#infoLabel {
                color: #7f8c8d;
                font-style: italic;
            }
            QLabel#sectionLabel {
                font-weight: bold;
                color: #2c3e50;
            }
            QLabel#imagePreview {
                border: 1px dashed #bdc3c7;
                border-radius: 4px;
                background-color: white;
                min-height: 120px;
                min-width: 120px;
            }
            QFrame#headerFrame {
                background-color: white;
                border-radius: 10px;
                margin: 5px;
            }
            QFrame#contentFrame {
                background-color: white;
                border-radius: 10px;
                margin: 5px;
            }
        """)

        self.init_ui()

    def init_ui(self):
        # Layout ch√≠nh
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)

        # --- Ti√™u ƒë·ªÅ ---
        header_frame = QFrame()
        header_frame.setObjectName("headerFrame")
        header_layout = QVBoxLayout(header_frame)

        title = QLabel("üîß G·ª¨I Y√äU C·∫¶U S·ª¨A CH·ªÆA")
        title.setObjectName("titleLabel")
        title.setAlignment(Qt.AlignCenter)
        header_layout.addWidget(title)

        # --- Th√¥ng tin ph√≤ng ---
        room_info = QLabel(f"Ph√≤ng: #{self.room_id} | M√£ ng∆∞·ªùi thu√™: {self.tenant_id}")
        room_info.setObjectName("infoLabel")
        room_info.setAlignment(Qt.AlignCenter)
        header_layout.addWidget(room_info)

        main_layout.addWidget(header_frame)

        # --- N·ªôi dung ch√≠nh ---
        content_frame = QFrame()
        content_frame.setObjectName("contentFrame")
        content_layout = QGridLayout(content_frame)

        # --- C·ªôt tr√°i - M√¥ t·∫£ chi ti·∫øt s·ª± c·ªë ---
        left_col = 0

        # Label m√¥ t·∫£
        desc_label = QLabel("üìù M√¥ t·∫£ chi ti·∫øt s·ª± c·ªë")
        desc_label.setObjectName("sectionLabel")
        content_layout.addWidget(desc_label, 0, left_col)

        # Lo·∫°i s·ª± c·ªë
        issue_type_label = QLabel("Lo·∫°i s·ª± c·ªë:")
        content_layout.addWidget(issue_type_label, 1, left_col)

        self.issue_type_combo = QComboBox()
        self.issue_type_combo.addItems([
            "--- Ch·ªçn lo·∫°i s·ª± c·ªë ---",
            "ƒêi·ªán - ƒê√®n, ·ªï c·∫Øm, thi·∫øt b·ªã ƒëi·ªán",
            "N∆∞·ªõc - ·ªêng n∆∞·ªõc, v√≤i, b·ªìn c·∫ßu",
            "C·∫•u tr√∫c - T∆∞·ªùng, tr·∫ßn, s√†n, c·ª≠a",
            "ƒê·ªì n·ªôi th·∫•t - Gi∆∞·ªùng, t·ªß, b√†n gh·∫ø",
            "Thi·∫øt b·ªã - M√°y l·∫°nh, qu·∫°t, t·ªß l·∫°nh",
            "C√¥n tr√πng - Mu·ªói, ki·∫øn, gi√°n",
            "An ninh - Kh√≥a, c·ª≠a, camera",
            "Kh√°c"
        ])
        content_layout.addWidget(self.issue_type_combo, 2, left_col)

        # M·ª©c ƒë·ªô kh·∫©n c·∫•p
        urgency_label = QLabel("M·ª©c ƒë·ªô kh·∫©n c·∫•p:")
        content_layout.addWidget(urgency_label, 3, left_col)

        self.urgency_combo = QComboBox()
        self.urgency_combo.addItems([
            "B√¨nh th∆∞·ªùng - C√≥ th·ªÉ ch·ªù ƒë·ª£i",
            "Kh·∫©n c·∫•p - C·∫ßn s·ª≠a trong 24h",
            "R·∫•t kh·∫©n c·∫•p - C·∫ßn s·ª≠a ngay l·∫≠p t·ª©c"
        ])
        content_layout.addWidget(self.urgency_combo, 4, left_col)

        # Chi ti·∫øt s·ª± c·ªë
        detail_label = QLabel("Chi ti·∫øt s·ª± c·ªë:")
        content_layout.addWidget(detail_label, 5, left_col)

        self.description_edit = QTextEdit()
        self.description_edit.setPlaceholderText(
            "M√¥ t·∫£ chi ti·∫øt v·ªÅ s·ª± c·ªë trong ph√≤ng...\nV·ªã tr√≠ ch√≠nh x√°c, th·ªùi ƒëi·ªÉm ph√°t hi·ªán, ·∫£nh h∆∞·ªüng ƒë·∫øn sinh ho·∫°t...")
        self.description_edit.setMinimumHeight(200)
        content_layout.addWidget(self.description_edit, 6, left_col)

        # --- C·ªôt ph·∫£i - Th√¥ng tin b·ªï sung ---
        right_col = 1

        # Th·ªùi gian ph√°t hi·ªán
        time_label = QLabel("‚è∞ Th·ªùi gian ph√°t hi·ªán")
        time_label.setObjectName("sectionLabel")
        content_layout.addWidget(time_label, 0, right_col)

        self.date_edit = QDateEdit(QDate.currentDate())
        self.date_edit.setCalendarPopup(True)
        self.date_edit.setMaximumDate(QDate.currentDate())
        self.date_edit.setDisplayFormat("dd/MM/yyyy")
        content_layout.addWidget(self.date_edit, 1, right_col)

        # H√¨nh ·∫£nh minh h·ªça
        img_label = QLabel("üì∑ H√¨nh ·∫£nh minh h·ªça")
        img_label.setObjectName("sectionLabel")
        content_layout.addWidget(img_label, 2, right_col)

        self.image_label = QLabel("Ch∆∞a c√≥ ·∫£nh ƒë∆∞·ª£c ch·ªçn")
        self.image_label.setObjectName("imagePreview")
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setMinimumHeight(120)
        content_layout.addWidget(self.image_label, 3, right_col)

        self.upload_btn = QPushButton("üñºÔ∏è Ch·ªçn ·∫£nh")
        self.upload_btn.clicked.connect(self.upload_image)
        content_layout.addWidget(self.upload_btn, 4, right_col)

        # Th√¥ng tin li√™n h·ªá
        contact_label = QLabel("üìû Th√¥ng tin li√™n h·ªá")
        contact_label.setObjectName("sectionLabel")
        content_layout.addWidget(contact_label, 5, right_col)

        contact_form = QFormLayout()

        self.contact_phone = QLineEdit()
        self.contact_phone.setPlaceholderText("S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá")
        contact_form.addRow("ƒêi·ªán tho·∫°i:", self.contact_phone)

        self.available_time = QLineEdit()
        self.available_time.setPlaceholderText("VD: Sau 18h h√†ng ng√†y")
        contact_form.addRow("Th·ªùi gian thu·∫≠n ti·ªán:", self.available_time)

        contact_widget = QWidget()
        contact_widget.setLayout(contact_form)
        content_layout.addWidget(contact_widget, 6, right_col)

        # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ªôt
        content_layout.setColumnStretch(left_col, 2)
        content_layout.setColumnStretch(right_col, 1)

        main_layout.addWidget(content_frame)

        # --- N√∫t b·∫•m ---
        btn_layout = QHBoxLayout()

        # Th√™m kho·∫£ng tr·ªëng ƒë·∫©y c√°c n√∫t sang ph·∫£i
        btn_layout.addStretch()

        self.reset_btn = QPushButton("ƒê·∫∂T L·∫†I")
        self.reset_btn.setObjectName("resetBtn")
        self.reset_btn.clicked.connect(self.reset_form)
        btn_layout.addWidget(self.reset_btn)

        self.submit_btn = QPushButton("G·ª¨I Y√äU C·∫¶U")
        self.submit_btn.clicked.connect(self.submit_request)
        btn_layout.addWidget(self.submit_btn)

        main_layout.addLayout(btn_layout)

        # Hi·ªÉn th·ªã l·ªãch s·ª≠ s·ª≠a ch·ªØa g·∫ßn ƒë√¢y
        self.add_maintenance_history()
        main_layout.addWidget(self.create_maintenance_history())

        self.setLayout(main_layout)

    def add_maintenance_history(self):
        # H√†m n√†y s·∫Ω t·∫£i l·ªãch s·ª≠ y√™u c·∫ßu s·ª≠a ch·ªØa c·ªßa ph√≤ng hi·ªán t·∫°i
        # T·∫°m th·ªùi s·ª≠ d·ª•ng d·ªØ li·ªáu gi·∫£
        self.maintenance_history = [
            {
                "id": 1,
                "description": "V√≤i n∆∞·ªõc b·ªã r·ªâ",
                "status": "ƒê√£ ho√†n th√†nh",
                "date": "01/04/2025"
            },
            {
                "id": 2,
                "description": "ƒê√®n ph√≤ng t·∫Øm kh√¥ng s√°ng",
                "status": "ƒêang x·ª≠ l√Ω",
                "date": "20/04/2025"
            }
        ]

    def create_maintenance_history(self):
        # T·∫°o m·ªôt frame ch·ª©a l·ªãch s·ª≠
        history_container = QFrame()
        history_container.setStyleSheet("background-color: white; border-radius: 5px;")

        # T·∫°o layout cho frame
        history_layout = QVBoxLayout(history_container)
        history_layout.setContentsMargins(0, 0, 0, 0)

        if not hasattr(self, 'maintenance_history') or not self.maintenance_history:
            no_data = QLabel("Kh√¥ng c√≥ y√™u c·∫ßu s·ª≠a ch·ªØa g·∫ßn ƒë√¢y")
            no_data.setAlignment(Qt.AlignCenter)
            no_data.setStyleSheet("color: #7f8c8d; padding: 15px;")
            history_layout.addWidget(no_data)
        else:
            # T·∫°o table-like layout v·ªõi header
            grid = QGridLayout()
            grid.setSpacing(10)

            # Header
            headers = ["#", "M√¥ t·∫£ s·ª± c·ªë", "Tr·∫°ng th√°i", "Ng√†y"]
            for col, header in enumerate(headers):
                label = QLabel(header)
                label.setStyleSheet("font-weight: bold; padding: 5px; background-color: #f0f0f0;")
                grid.addWidget(label, 0, col)

            # Rows
            for row, item in enumerate(self.maintenance_history, 1):
                # ID
                id_label = QLabel(f"#{item['id']}")
                id_label.setAlignment(Qt.AlignCenter)
                grid.addWidget(id_label, row, 0)

                # Description
                desc_label = QLabel(item["description"])
                grid.addWidget(desc_label, row, 1)

                # Status
                status_label = QLabel(item["status"])
                if item["status"] == "ƒê√£ ho√†n th√†nh":
                    status_label.setStyleSheet("color: #27ae60; font-weight: bold;")
                else:
                    status_label.setStyleSheet("color: #f39c12; font-weight: bold;")
                grid.addWidget(status_label, row, 2)

                # Date
                date_label = QLabel(item["date"])
                date_label.setAlignment(Qt.AlignCenter)
                grid.addWidget(date_label, row, 3)

            # Set column stretch
            grid.setColumnStretch(0, 1)  # ID
            grid.setColumnStretch(1, 3)  # Description
            grid.setColumnStretch(2, 2)  # Status
            grid.setColumnStretch(3, 1)  # Date

            history_layout.addLayout(grid)

        return history_container

    def upload_image(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Ch·ªçn ·∫£nh minh h·ªça",
            "",
            "Images (*.png *.xpm *.jpg *.jpeg)"
        )

        if file_path:
            self.image_path = file_path
            # Hi·ªÉn th·ªã ·∫£nh thu nh·ªè
            pixmap = QPixmap(file_path)
            if not pixmap.isNull():
                pixmap = pixmap.scaled(300, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.image_label.setPixmap(pixmap)
                self.image_label.setToolTip(file_path)
            else:
                file_name = os.path.basename(file_path)
                self.image_label.setText(f"ƒê√£ ch·ªçn: {file_name}")

    def submit_request(self):
        # L·∫•y th√¥ng tin t·ª´ form
        issue_type = self.issue_type_combo.currentText()
        urgency = self.urgency_combo.currentText()
        description = self.description_edit.toPlainText().strip()

        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if issue_type == "--- Ch·ªçn lo·∫°i s·ª± c·ªë ---":
            QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn lo·∫°i s·ª± c·ªë.")
            return

        if not description:
            QMessageBox.warning(self, "Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p m√¥ t·∫£ chi ti·∫øt s·ª± c·ªë.")
            return

        # T·∫°o chu·ªói m√¥ t·∫£ ƒë·∫ßy ƒë·ªß
        full_description = f"[{issue_type}] [{urgency}]\n{description}"

        # Th√™m th√¥ng tin li√™n h·ªá n·∫øu c√≥
        contact_info = []
        if self.contact_phone.text().strip():
            contact_info.append(f"SƒêT: {self.contact_phone.text().strip()}")
        if self.available_time.text().strip():
            contact_info.append(f"Th·ªùi gian li√™n h·ªá: {self.available_time.text().strip()}")

        if contact_info:
            full_description += "\n\nTh√¥ng tin li√™n h·ªá:\n" + "\n".join(contact_info)

        # Th√™m th·ªùi gian ph√°t hi·ªán
        discovery_date = self.date_edit.date().toString("dd/MM/yyyy")
        full_description += f"\n\nTh·ªùi gian ph√°t hi·ªán s·ª± c·ªë: {discovery_date}"

        # ƒê√≥ng g√≥i d·ªØ li·ªáu
        request_data = {
            "room_id": self.room_id,
            "tenant_id": self.tenant_id,
            "description": full_description,
            "image_path": self.image_path or ""
        }

        # G·ª≠i d·ªØ li·ªáu cho controller/service
        try:
            from QLNHATRO.RentalManagementApplication.controller.TenantController.TenantController import \
                TenantController
            TenantController.submit_maintenance_request(request_data)

            QMessageBox.information(
                self,
                "ƒê√£ g·ª≠i",
                "Y√™u c·∫ßu s·ª≠a ch·ªØa ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ch·ªß tr·ªç.\nB·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t."
            )

            # C·∫≠p nh·∫≠t l·ªãch s·ª≠ y√™u c·∫ßu sau khi g·ª≠i th√†nh c√¥ng
            self.add_maintenance_history()
            self.reset_form()
        except Exception as e:
            QMessageBox.critical(
                self,
                "L·ªói",
                f"Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu. L·ªói: {str(e)}"
            )

    def reset_form(self):
        self.description_edit.clear()
        self.image_label.setPixmap(QPixmap())  # X√≥a h√¨nh ·∫£nh
        self.image_label.setText("Ch∆∞a c√≥ ·∫£nh ƒë∆∞·ª£c ch·ªçn")
        self.image_path = None
        self.issue_type_combo.setCurrentIndex(0)
        self.urgency_combo.setCurrentIndex(0)
        self.date_edit.setDate(QDate.currentDate())
        self.contact_phone.clear()
        self.available_time.clear()

    def get_room_id_for_tenant(self, tenant_id):
        # Trong th·ª±c t·∫ø, h√†m n√†y s·∫Ω truy v·∫•n c∆° s·ªü d·ªØ li·ªáu ƒë·ªÉ l·∫•y th√¥ng tin ph√≤ng
        try:
            from QLNHATRO.RentalManagementApplication.services.TenantService import TenantService
            return TenantService.get_room_id_by_tenant(tenant_id)
        except Exception:
            # Tr∆∞·ªùng h·ª£p kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c, tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
            return "N/A"