# TenantListInvoices.py

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QFrame, QMessageBox

from QLNHATRO.RentalManagementApplication.controller.InvoiceController.InvoiceController import InvoiceController
from QLNHATRO.RentalManagementApplication.frontend.Component.tableUI import TableUI
from QLNHATRO.RentalManagementApplication.frontend.views.Invoices.InvoiceView import InvoiceView


class TenantListInvoices(QWidget):
    def __init__(self, main_window, invoice_list, id_tenant):
        super().__init__()
        self.main_window = main_window
        self.id_tenant = id_tenant

        # Kh·ªüi t·∫°o danh s√°ch h√≥a ƒë∆°n
        self.invoices = []

        if invoice_list is not None and len(invoice_list) > 0:
            # Transform invoice data to match table format
            for i, invoice in enumerate(invoice_list, 1):
                invoice_date = invoice['date']
                # Format date as month/year if possible
                try:
                    from datetime import datetime
                    date_obj = datetime.strptime(invoice_date, "%d-%m-%Y")
                    invoice_month = f"{date_obj.month:02d}/{date_obj.year}"
                except:
                    invoice_month = invoice_date

                self.invoices.append({
                    "STT": str(i),
                    "H√≥a ƒë∆°n th√°ng": invoice_month,
                    "Ch·ªâ s·ªë ƒëi·ªán": invoice['electricity'],
                    "Ch·ªâ s·ªë n∆∞·ªõc": invoice['water'],
                    "T·ªïng Ti·ªÅn": invoice['total_amount'],
                    "Ng√†y xu·∫•t h√≥a ƒë∆°n": invoice_date,
                    "T√¨nh tr·∫°ng thanh to√°n": invoice['status'],
                    "Xem chi ti·∫øt": "Xem",
                    "id_invoice": invoice['invoice_id']  # Keep track of the invoice ID
                })
        else:
            # Default empty invoice for display
            self.invoices = [{
                "STT": "None",
                "H√≥a ƒë∆°n th√°ng": "None",
                "Ch·ªâ s·ªë ƒëi·ªán": "0 kWh",
                "Ch·ªâ s·ªë n∆∞·ªõc": "0 m¬≥",
                "T·ªïng Ti·ªÅn": "0 VNƒê",
                "Ng√†y xu·∫•t h√≥a ƒë∆°n": "None",
                "T√¨nh tr·∫°ng thanh to√°n": "None",
                "Xem chi ti·∫øt": "None",
                "id_invoice": None
            }]

        main_layout = QVBoxLayout()
        self.setStyleSheet("background-color: #ecf0f1;")

        title = QLabel("üßæ Danh s√°ch h√≥a ƒë∆°n c·ªßa b·∫°n")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #2c3e50; margin-bottom: 10px;")
        title.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title)

        frame = QFrame()
        frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 12px;
                border: 1px solid #dcdcdc;
                padding: 10px;
                box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
            }
        """)

        headers = [
            "STT", "H√≥a ƒë∆°n th√°ng", "Ch·ªâ s·ªë ƒëi·ªán", "Ch·ªâ s·ªë n∆∞·ªõc",
            "T·ªïng Ti·ªÅn", "Ng√†y xu·∫•t h√≥a ƒë∆°n", "T√¨nh tr·∫°ng thanh to√°n", "Xem chi ti·∫øt"
        ]
        self.table = TableUI(headers)
        # Make a mapping to ensure keys match headers
        header_to_key = {
            "STT": "STT",
            "H√≥a ƒë∆°n th√°ng": "H√≥a ƒë∆°n th√°ng",
            "Ch·ªâ s·ªë ƒëi·ªán": "Ch·ªâ s·ªë ƒëi·ªán",
            "Ch·ªâ s·ªë n∆∞·ªõc": "Ch·ªâ s·ªë n∆∞·ªõc",
            "T·ªïng Ti·ªÅn": "T·ªïng Ti·ªÅn",
            "Ng√†y xu·∫•t h√≥a ƒë∆°n": "Ng√†y xu·∫•t h√≥a ƒë∆°n",
            "T√¨nh tr·∫°ng thanh to√°n": "T√¨nh tr·∫°ng thanh to√°n",
            "Xem chi ti·∫øt": "Xem chi ti·∫øt"
        }

        self.table = TableUI(headers)
        # Pass header_to_key mapping to ensure columns match data
        self.table.populate(self.invoices, has_button=True, button_callback=self.show_detail,header_to_key=header_to_key)

        main_layout.addWidget(self.table)
        main_layout.addWidget(frame)

        self.setLayout(main_layout)

    def show_detail(self, row):
        try:
            invoice = self.invoices[row]
            id_invoice = invoice.get("id_invoice", None)
            if id_invoice:
                print(f"üßæ ID h√≥a ƒë∆°n ƒë∆∞·ª£c ch·ªçn: {id_invoice}")

                # G·ªçi controller ƒë·ªÉ chu·∫©n b·ªã d·ªØ li·ªáu
                invoice_data, landlord_data, tenant_data, room_data = InvoiceController.open_view_invoice(
                    id_invoice)

                # T·∫°o giao di·ªán h√≥a ƒë∆°n v√† hi·ªÉn th·ªã
                view = InvoiceView(
                    main_window=self.main_window,
                    invoice_data=invoice_data,
                    landlord_data=landlord_data,
                    tenant_data=tenant_data,
                    room_data=room_data
                )

                self.main_window.setCentralWidget(view)
            else:
                QMessageBox.warning(self, "Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y ID h√≥a ƒë∆°n.")
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ID h√≥a ƒë∆°n.")
        except IndexError:
            QMessageBox.warning(self, "Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y d√≤ng h√≥a ƒë∆°n.")
            print("‚ùå Kh√¥ng t√¨m th·∫•y d√≤ng h√≥a ƒë∆°n.")

    def update_payment_status(self, id_invoice, new_status):
        """
        C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n c·ªßa h√≥a ƒë∆°n

        Args:
            id_invoice: ID c·ªßa h√≥a ƒë∆°n c·∫ßn c·∫≠p nh·∫≠t
            new_status: Tr·∫°ng th√°i m·ªõi ("ƒê√£ thanh to√°n" ho·∫∑c "Ch∆∞a thanh to√°n")
        """
        for invoice in self.invoices:
            if invoice.get("id_invoice") == id_invoice:
                invoice["T√¨nh tr·∫°ng thanh to√°n"] = new_status
                # Refresh b·∫£ng
                header_to_key = {
                    "STT": "STT",
                    "H√≥a ƒë∆°n th√°ng": "H√≥a ƒë∆°n th√°ng",
                    "Ch·ªâ s·ªë ƒëi·ªán": "Ch·ªâ s·ªë ƒëi·ªán",
                    "Ch·ªâ s·ªë n∆∞·ªõc": "Ch·ªâ s·ªë n∆∞·ªõc",
                    "T·ªïng Ti·ªÅn": "T·ªïng Ti·ªÅn",
                    "Ng√†y xu·∫•t h√≥a ƒë∆°n": "Ng√†y xu·∫•t h√≥a ƒë∆°n",
                    "T√¨nh tr·∫°ng thanh to√°n": "T√¨nh tr·∫°ng thanh to√°n",
                    "Xem chi ti·∫øt": "Xem chi ti·∫øt"
                }
                self.table.populate(self.invoices, has_button=True, button_callback=self.show_detail,
                                    header_to_key=header_to_key)
                return True
        return False

    def pay_invoice(self, row):
        """
        X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thanh to√°n h√≥a ƒë∆°n
        Ch·ª©c nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai khi c√≥ ch·ª©c nƒÉng thanh to√°n
        """
        try:
            invoice = self.invoices[row]
            id_invoice = invoice.get("id_invoice")
            if id_invoice:
                # G·ªçi controller ƒë·ªÉ x·ª≠ l√Ω thanh to√°n
                success = InvoiceController.pay_invoice(id_invoice, self.id_tenant)
                if success:
                    self.update_payment_status(id_invoice, "ƒê√£ thanh to√°n")
                    QMessageBox.information(self, "Th√¥ng b√°o", "Thanh to√°n h√≥a ƒë∆°n th√†nh c√¥ng!")
                else:
                    QMessageBox.warning(self, "Th√¥ng b√°o", "Thanh to√°n h√≥a ƒë∆°n th·∫•t b·∫°i!")
            else:
                QMessageBox.warning(self, "Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y ID h√≥a ƒë∆°n.")
        except IndexError:
            QMessageBox.warning(self, "Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y d√≤ng h√≥a ƒë∆°n.")