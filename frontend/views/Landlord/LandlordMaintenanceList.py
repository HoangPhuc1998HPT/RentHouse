from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QFrame, QHBoxLayout, QPushButton, QMessageBox,
    QTableWidget, QTableWidgetItem, QHeaderView
)

from QLNHATRO.RentalManagementApplication.frontend.Component.ConfirmDialog import ConfirmDialog
from QLNHATRO.RentalManagementApplication.frontend.Style.GlobalStyle import GlobalStyle


class RoomMaintenanceList(QWidget):
    def __init__(self, main_window, maintenance_requests=None, id_landlord=None):
        super().__init__()
        self.setStyleSheet(GlobalStyle.global_stylesheet())
        self.main_window = main_window
        self.id_landlord = id_landlord

        self.maintenance_requests = maintenance_requests


        self.setup_ui()

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        main_layout = QVBoxLayout()
        main_layout.setSpacing(20)  # TƒÉng kho·∫£ng c√°ch gi·ªØa c√°c ph·∫ßn t·ª≠
        main_layout.setContentsMargins(20, 20, 20, 20)  # Th√™m margin cho layout ch√≠nh

        # Ti√™u ƒë·ªÅ - s·ª≠ d·ª•ng GlobalStyle
        title = QLabel("üîß Danh s√°ch y√™u c·∫ßu b·∫£o tr√¨ ph√≤ng tr·ªç")
        title.setObjectName("Title")
        title.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title)

        # Th·ªëng k√™ nhanh
        stats_widget = self.create_stats_section()
        main_layout.addWidget(stats_widget)

        # Khung ch·ª©a b·∫£ng - √°p d·ª•ng tableCard style t·ª´ GlobalStyle
        table_frame = QFrame()
        table_frame.setObjectName("tableCard")
        table_layout = QVBoxLayout(table_frame)
        table_layout.setContentsMargins(15, 15, 15, 15)

        # T·∫°o b·∫£ng danh s√°ch y√™u c·∫ßu b·∫£o tr√¨ tr·ª±c ti·∫øp v·ªõi QTableWidget
        self.headers = [
            "STT", "Ph√≤ng", "Ng∆∞·ªùi thu√™", "Lo·∫°i s·ª± c·ªë", "M·ª©c ƒë·ªô",
            "Tr·∫°ng th√°i", "Ng√†y t·∫°o", "SƒêT li√™n h·ªá", "Chi ti·∫øt", "X·ª≠ l√Ω"
        ]

        self.table = QTableWidget()
        self.setup_table()

        # Mapping header t·ªõi key trong data
        self.header_to_key = {
            "STT": "stt",
            "Ph√≤ng": "room_name",
            "Ng∆∞·ªùi thu√™": "tenant_name",
            "Lo·∫°i s·ª± c·ªë": "issue_type",
            "M·ª©c ƒë·ªô": "urgency_level",
            "Tr·∫°ng th√°i": "status",
            "Ng√†y t·∫°o": "created_at",
            "SƒêT li√™n h·ªá": "contact_phone"
        }

        # Populate d·ªØ li·ªáu v√†o b·∫£ng
        self.populate_table()

        table_layout.addWidget(self.table)
        main_layout.addWidget(table_frame)

        self.setLayout(main_layout)

    def create_stats_section(self):
        """T·∫°o section th·ªëng k√™ nhanh v·ªõi GlobalStyle"""
        stats_frame = QFrame()
        stats_frame.setObjectName("tableCard")  # S·ª≠ d·ª•ng style card t·ª´ GlobalStyle
        stats_layout = QHBoxLayout(stats_frame)
        stats_layout.setContentsMargins(20, 15, 20, 15)
        stats_layout.setSpacing(15)

        # ƒê·∫øm s·ªë l∆∞·ª£ng theo tr·∫°ng th√°i
        pending_count = len([req for req in self.maintenance_requests if req['status'] in ['Pending']])
        in_progress_count = len(
            [req for req in self.maintenance_requests if req['status'] in ['ƒêang x·ª≠ l√Ω', 'In Progress']])
        urgent_count = len([req for req in self.maintenance_requests if req['urgency_level'] == 'Kh·∫©n c·∫•p'])

        # T·∫°o c√°c label th·ªëng k√™ v·ªõi style c·∫£i ti·∫øn
        stats_info = [
            (f"üìã T·ªïng y√™u c·∫ßu: {len(self.maintenance_requests)}", GlobalStyle.PRIMARY_COLOR),
            (f"‚è≥ Ch·ªù x·ª≠ l√Ω: {pending_count}", "#e74c3c"),
            (f"üîÑ ƒêang x·ª≠ l√Ω: {in_progress_count}", "#f39c12"),
            (f"üö® Kh·∫©n c·∫•p: {urgent_count}", "#e74c3c")
        ]

        for text, color in stats_info:
            label = QLabel(text)
            label.setObjectName("valueLabel")  # S·ª≠ d·ª•ng style t·ª´ GlobalStyle
            label.setStyleSheet(f"""
                QLabel#valueLabel {{
                    background-color: {color};
                    color: white;
                    font-size: 14px;
                    font-weight: 600;
                    padding: 12px 16px;
                    border-radius: 8px;
                    margin: 2px;
                    min-width: 120px;
                }}
            """)
            label.setAlignment(Qt.AlignCenter)
            stats_layout.addWidget(label)

        stats_layout.addStretch()
        return stats_frame

    def setup_table(self):
        """Thi·∫øt l·∫≠p c·∫•u h√¨nh cho b·∫£ng"""
        self.table.setColumnCount(len(self.headers))
        self.table.setHorizontalHeaderLabels(self.headers)
        self.table.setRowCount(len(self.maintenance_requests))

        # C√†i ƒë·∫∑t header v√† c√°c thu·ªôc t√≠nh chung
        self.table.verticalHeader().setVisible(False)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.horizontalHeader().setDefaultAlignment(Qt.AlignCenter)
        self.table.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.table.setShowGrid(True)
        self.table.verticalHeader().setDefaultSectionSize(50)

        # √Åp d·ª•ng style t·ª´ GlobalStyle
        self.table.setStyleSheet(f"""
            QTableWidget {{
                background-color: {GlobalStyle.MAIN_BG};
                color: {GlobalStyle.TEXT_COLOR};
                font-size: 14px;
                font-family: {GlobalStyle.FONT_FAMILY};
                border: 1px solid #EBEBF0;
                border-radius: 8px;
                gridline-color: #EBEBF0;
            }}

            QTableWidget QHeaderView::section {{
                background-color: {GlobalStyle.TABLE_HEADER_BG};
                color: {GlobalStyle.TABLE_TEXT_COLOR};
                font-size: 14px;
                font-weight: 500;
                font-family: {GlobalStyle.FONT_FAMILY};
                padding: 12px 8px;
                border: none;
                border-bottom: 2px solid #E5E5E5;
            }}

            QTableWidget::item {{
                padding: 8px;
                border-bottom: 1px solid #F0F0F0;
            }}

            QTableWidget::item:selected {{
                background-color: #EAF2FF;
                color: {GlobalStyle.TEXT_COLOR};
            }}

            QTableWidget::item:hover {{
                background-color: #F8FAFC;
            }}
        """)

    def populate_table(self):
        """ƒêi·ªÅn d·ªØ li·ªáu v√†o b·∫£ng"""
        for row, row_data in enumerate(self.maintenance_requests):
            for col, header in enumerate(self.headers):
                if header in ["Chi ti·∫øt", "X·ª≠ l√Ω"]:
                    # B·ªè qua c√°c c·ªôt button, s·∫Ω x·ª≠ l√Ω ri√™ng
                    continue

                # L·∫•y key t∆∞∆°ng ·ª©ng v·ªõi header
                key = self.header_to_key.get(header, header)
                value = row_data.get(key, "")

                # T·∫°o item v·ªõi style ƒë·∫∑c bi·ªát cho m·ªôt s·ªë c·ªôt
                item = QTableWidgetItem(str(value))
                item.setTextAlignment(Qt.AlignCenter)

                # Style ƒë·∫∑c bi·ªát cho c·ªôt tr·∫°ng th√°i
                if header == "Tr·∫°ng th√°i":
                    if value == "Kh·∫©n c·∫•p" or value == "Pending":
                        item.setBackground(QColor("#FEF2F2"))
                        item.setForeground(QColor("#DC2626"))
                    elif value == "ƒêang x·ª≠ l√Ω":
                        item.setBackground(QColor("#FEF3C7"))
                        item.setForeground(QColor("#D97706"))

                # Style ƒë·∫∑c bi·ªát cho c·ªôt m·ª©c ƒë·ªô
                elif header == "M·ª©c ƒë·ªô":
                    if value == "Kh·∫©n c·∫•p":
                        item.setBackground(QColor("#FEE2E2"))
                        item.setForeground(QColor("#DC2626"))

                self.table.setItem(row, col, item)

        # Th√™m c√°c button sau khi ƒëi·ªÅn d·ªØ li·ªáu
        self.add_detail_buttons()
        self.add_action_buttons()

    def add_detail_buttons(self):
        """Th√™m button 'Chi ti·∫øt' v√†o c·ªôt t∆∞∆°ng ·ª©ng"""
        detail_col = self.headers.index("Chi ti·∫øt")

        for row in range(len(self.maintenance_requests)):
            detail_btn = QPushButton("üîç Chi ti·∫øt")
            detail_btn.setObjectName("detailBtn")
            detail_btn.setStyleSheet(f"""
                QPushButton#detailBtn {{
                    background-color: {GlobalStyle.PRIMARY_COLOR};
                    color: white;
                    font-size: 12px;
                    font-weight: 500;
                    font-family: {GlobalStyle.FONT_FAMILY};
                    padding: 8px 16px;
                    border-radius: 8px;
                    border: none;
                    margin: 2px;
                    min-width: 100px;
                }}
                QPushButton#detailBtn:hover {{
                    background-color: #1D4DA5;
                    transform: translateY(-1px);
                }}
                QPushButton#detailBtn:pressed {{
                    background-color: #1A4299;
                }}
            """)

            detail_btn.clicked.connect(lambda checked, r=row: self.show_request_details(r))
            self.table.setCellWidget(row, detail_col, detail_btn)

    def add_action_buttons(self):
        """Th√™m button 'X·ª≠ l√Ω' v√†o c·ªôt t∆∞∆°ng ·ª©ng"""
        action_col = self.headers.index("X·ª≠ l√Ω")

        for row in range(len(self.maintenance_requests)):
            action_btn = QPushButton("üîß X·ª≠ l√Ω")
            action_btn.setObjectName("actionBtn")

            # Ki·ªÉm tra tr·∫°ng th√°i ƒë·ªÉ disable button n·∫øu ƒë√£ x·ª≠ l√Ω
            current_status = self.maintenance_requests[row].get('status', '')
            if current_status in ['Ho√†n th√†nh', 'Completed']:
                action_btn.setText("‚úÖ Ho√†n th√†nh")
                action_btn.setEnabled(False)
                action_btn.setStyleSheet(f"""
                    QPushButton#actionBtn {{
                        background-color: #27AE60;
                        color: white;
                        font-size: 12px;
                        font-weight: 500;
                        font-family: {GlobalStyle.FONT_FAMILY};
                        padding: 8px 16px;
                        border-radius: 8px;
                        border: none;
                        margin: 2px;
                        min-width: 100px;
                    }}
                """)
            else:
                action_btn.setStyleSheet(f"""
                    QPushButton#actionBtn {{
                        background-color: {GlobalStyle.BUTTON_SPECIAL_COLOR};
                        color: white;
                        font-size: 12px;
                        font-weight: 500;
                        font-family: {GlobalStyle.FONT_FAMILY};
                        padding: 8px 16px;
                        border-radius: 8px;
                        border: none;
                        margin: 2px;
                        min-width: 100px;
                    }}
                    QPushButton#actionBtn:hover {{
                        background-color: #1E35CC;
                        transform: translateY(-1px);
                    }}
                    QPushButton#actionBtn:pressed {{
                        background-color: #162BB8;
                    }}
                """)

            action_btn.clicked.connect(lambda checked, r=row: self.handle_maintenance_request(r))

            self.table.setCellWidget(row, action_col, action_btn)

    def show_request_details(self, row):
        request_data = self.maintenance_requests[row]
        request_data["id_landlord"] = self.id_landlord
        from QLNHATRO.RentalManagementApplication.controller.MaintenanceController.MaintenanceController import \
            MaintenanceController
        MaintenanceController.go_to_maintenance_detail_page(self, request_data)

    def handle_maintenance_request(self, row):
        """X·ª≠ l√Ω y√™u c·∫ßu b·∫£o tr√¨ v·ªõi style MessageBox c·∫£i ti·∫øn"""
        request = self.maintenance_requests[row]
        request_id = request['request_id']

        # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n v·ªõi style
        reply = QMessageBox.question(
            self,
            'X√°c nh·∫≠n x·ª≠ l√Ω',
            f"B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu b·∫£o tr√¨ c·ªßa {request['room_name']} th√†nh 'ƒêang x·ª≠ l√Ω'?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        # √Åp d·ª•ng style cho dialog x√°c nh·∫≠n
        confirmed = ConfirmDialog.ask(self, f"B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu b·∫£o tr√¨ c·ªßa {request['room_name']} th√†nh 'ƒêang x·ª≠ l√Ω'?")

        if confirmed == QMessageBox.Yes:
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i trong data
            self.maintenance_requests[row]['status'] = 'ƒêang x·ª≠ l√Ω'

            # Refresh l·∫°i b·∫£ng v√† stats
            self.refresh_table()
            self.refresh_stats()

            # Th√¥ng b√°o th√†nh c√¥ng
            success_msg = QMessageBox()
            success_msg.setIcon(QMessageBox.Information)
            success_msg.setWindowTitle("Th√†nh c√¥ng")
            success_msg.setText(f"ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu b·∫£o tr√¨ c·ªßa {request['room_name']} th√†nh 'ƒêang x·ª≠ l√Ω'")
            # Style cho th√¥ng b√°o th√†nh c√¥ng

            success_msg.setStyleSheet(f"""
                QMessageBox {{
                    background-color: {GlobalStyle.MAIN_BG};
                    color: {GlobalStyle.TEXT_COLOR};
                    font-family: {GlobalStyle.FONT_FAMILY};
                }}
                QMessageBox QPushButton {{
                    background-color: #27AE60;
                    color: white;
                    font-size: 14px;
                    font-family: {GlobalStyle.FONT_FAMILY};
                    padding: 8px 20px;
                    border-radius: 6px;
                    min-width: 80px;
                }}
                QMessageBox QPushButton:hover {{
                    background-color: #229954;
                }}
            """)

            success_msg.exec_()

            # TODO: G·ªçi controller ƒë·ªÉ c·∫≠p nh·∫≠t database
            # MaintenanceController.update_status(request_id, 'ƒêang x·ª≠ l√Ω')
            from QLNHATRO.RentalManagementApplication.services.MaintenanceService import MaintenanceService
            result = MaintenanceService.update_maintenance_status(request_id, 'ƒêang x·ª≠ l√Ω')

    def refresh_table(self):
        """Refresh l·∫°i b·∫£ng sau khi c·∫≠p nh·∫≠t d·ªØ li·ªáu"""
        # X√≥a v√† thi·∫øt l·∫≠p l·∫°i b·∫£ng
        self.table.setRowCount(0)
        self.table.setRowCount(len(self.maintenance_requests))

        # Populate l·∫°i d·ªØ li·ªáu
        self.populate_table()

    def refresh_stats(self):
        """Refresh l·∫°i section th·ªëng k√™"""
        # T√¨m v√† c·∫≠p nh·∫≠t l·∫°i stats section
        # C√≥ th·ªÉ implement c√°ch refresh stats section t·∫°i ƒë√¢y
        pass

    def filter_by_status(self, status):
        """L·ªçc theo tr·∫°ng th√°i"""
        if status == "all":
            filtered_requests = self.maintenance_requests
        else:
            filtered_requests = [req for req in self.maintenance_requests if req['status'] == status]

        # C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªÉn th·ªã
        self.current_filtered_data = filtered_requests
        self.table.setRowCount(len(filtered_requests))

        # Populate d·ªØ li·ªáu ƒë√£ l·ªçc
        for row, row_data in enumerate(filtered_requests):
            for col, header in enumerate(self.headers):
                if header in ["Chi ti·∫øt", "X·ª≠ l√Ω"]:
                    continue

                key = self.header_to_key.get(header, header)
                value = row_data.get(key, "")

                item = QTableWidgetItem(str(value))
                item.setTextAlignment(Qt.AlignCenter)

                # Style cho tr·∫°ng th√°i
                if header == "Tr·∫°ng th√°i":
                    if value == "Kh·∫©n c·∫•p" or value == "Pending":
                        item.setBackground(Qt.color("#FEF2F2"))
                        item.setForeground(Qt.color("#DC2626"))
                    elif value == "ƒêang x·ª≠ l√Ω":
                        item.setBackground(Qt.color("#FEF3C7"))
                        item.setForeground(Qt.color("#D97706"))

                self.table.setItem(row, col, item)

        # Th√™m buttons cho d·ªØ li·ªáu ƒë√£ l·ªçc
        self.add_filtered_buttons(filtered_requests)

    def filter_by_urgency(self, urgency):
        """L·ªçc theo m·ª©c ƒë·ªô kh·∫©n c·∫•p"""
        if urgency == "all":
            filtered_requests = self.maintenance_requests
        else:
            filtered_requests = [req for req in self.maintenance_requests if req['urgency_level'] == urgency]

        # T∆∞∆°ng t·ª± nh∆∞ filter_by_status
        self.current_filtered_data = filtered_requests
        self.table.setRowCount(len(filtered_requests))

        for row, row_data in enumerate(filtered_requests):
            for col, header in enumerate(self.headers):
                if header in ["Chi ti·∫øt", "X·ª≠ l√Ω"]:
                    continue

                key = self.header_to_key.get(header, header)
                value = row_data.get(key, "")

                item = QTableWidgetItem(str(value))
                item.setTextAlignment(Qt.AlignCenter)

                if header == "M·ª©c ƒë·ªô":
                    if value == "Kh·∫©n c·∫•p":
                        item.setBackground(Qt.color("#FEE2E2"))
                        item.setForeground(Qt.color("#DC2626"))

                self.table.setItem(row, col, item)

        self.add_filtered_buttons(filtered_requests)

    def add_filtered_buttons(self, filtered_data):
        """Th√™m buttons cho d·ªØ li·ªáu ƒë√£ l·ªçc"""
        detail_col = self.headers.index("Chi ti·∫øt")
        action_col = self.headers.index("X·ª≠ l√Ω")

        for row in range(len(filtered_data)):
            # Button Chi ti·∫øt
            detail_btn = QPushButton("üîç Chi ti·∫øt")
            detail_btn.setObjectName("detailBtn")
            detail_btn.setStyleSheet(f"""
                QPushButton#detailBtn {{
                    background-color: {GlobalStyle.PRIMARY_COLOR};
                    color: white;
                    font-size: 12px;
                    font-weight: 500;
                    font-family: {GlobalStyle.FONT_FAMILY};
                    padding: 8px 16px;
                    border-radius: 8px;
                    min-width: 100px;
                }}
                QPushButton#detailBtn:hover {{
                    background-color: #1D4DA5;
                }}
            """)

            # T√¨m index g·ªëc c·ªßa item n√†y trong data ch√≠nh
            original_index = self.maintenance_requests.index(filtered_data[row])
            detail_btn.clicked.connect(lambda checked, r=original_index: self.show_request_details(r))
            self.table.setCellWidget(row, detail_col, detail_btn)

            # Button X·ª≠ l√Ω
            action_btn = QPushButton("üîß X·ª≠ l√Ω")
            action_btn.setObjectName("actionBtn")

            current_status = filtered_data[row].get('status', '')
            if current_status in ['Ho√†n th√†nh', 'Completed']:
                action_btn.setText("‚úÖ Ho√†n th√†nh")
                action_btn.setEnabled(False)
                action_btn.setStyleSheet(f"""
                    QPushButton#actionBtn {{
                        background-color: #27AE60;
                        color: white;
                        font-size: 12px;
                        font-family: {GlobalStyle.FONT_FAMILY};
                        padding: 8px 16px;
                        border-radius: 8px;
                        min-width: 100px;
                    }}
                """)
            else:
                action_btn.setStyleSheet(f"""
                    QPushButton#actionBtn {{
                        background-color: {GlobalStyle.BUTTON_SPECIAL_COLOR};
                        color: white;
                        font-size: 12px;
                        font-weight: 500;
                        font-family: {GlobalStyle.FONT_FAMILY};
                        padding: 8px 16px;
                        border-radius: 8px;
                        min-width: 100px;
                    }}
                    QPushButton#actionBtn:hover {{
                        background-color: #1E35CC;
                    }}
                """)

            action_btn.clicked.connect(lambda checked, r=original_index: self.handle_maintenance_request(r))
            self.table.setCellWidget(row, action_col, action_btn)