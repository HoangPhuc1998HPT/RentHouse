from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QFrame, QPushButton,
    QScrollArea, QTextEdit, QGridLayout, QGroupBox, QMessageBox,
    QComboBox, QDateEdit, QLineEdit
)
from PyQt5.QtCore import Qt, QDate, pyqtSignal
from PyQt5.QtGui import QPixmap, QFont
import os
from datetime import datetime

from QLNHATRO.RentalManagementApplication.frontend.Style.GlobalStyle import GlobalStyle
from QLNHATRO.RentalManagementApplication.frontend.Component.ConfirmDialog import ConfirmDialog
from QLNHATRO.RentalManagementApplication.frontend.Component.SuccessDialog import SuccessDialog


class MaintenanceRequestDetail(QWidget):
    """
    Widget hi·ªÉn th·ªã chi ti·∫øt y√™u c·∫ßu b·∫£o tr√¨ v·ªõi giao di·ªán ƒë·∫πp v√† ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng
    """
    # Signal ƒë·ªÉ th√¥ng b√°o khi c√≥ thay ƒë·ªïi tr·∫°ng th√°i
    status_updated = pyqtSignal(int, str)  # request_id, new_status

    def __init__(self, request_data, parent=None):
        super().__init__(parent)
        self.request_data = request_data
        self.setWindowTitle(f"Chi ti·∫øt y√™u c·∫ßu b·∫£o tr√¨ - {request_data.get('room_name', 'N/A')}")
        self.resize(GlobalStyle.WINDOW_WIDTH - 300, GlobalStyle.WINDOW_HEIGHT - 100)
        self.setMinimumSize(800, 600)
        self.setStyleSheet(GlobalStyle.global_stylesheet())

        self.setup_ui()
        self.populate_data()

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán"""
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(30, 30, 30, 30)
        main_layout.setSpacing(20)

        # Ti√™u ƒë·ªÅ
        self.create_header(main_layout)

        # Scroll area cho n·ªôi dung ch√≠nh
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)

        # Widget ch·ª©a n·ªôi dung
        content_widget = QWidget()
        content_layout = QVBoxLayout(content_widget)
        content_layout.setSpacing(15)

        # C√°c section th√¥ng tin
        self.create_basic_info_section(content_layout)
        self.create_issue_details_section(content_layout)
        self.create_contact_info_section(content_layout)
        self.create_image_section(content_layout)
        self.create_status_management_section(content_layout)
        self.create_notes_section(content_layout)

        scroll_area.setWidget(content_widget)
        main_layout.addWidget(scroll_area)

        # N√∫t ƒëi·ªÅu khi·ªÉn
        self.create_action_buttons(main_layout)

        self.setLayout(main_layout)

    def create_header(self, layout):
        """T·∫°o header v·ªõi th√¥ng tin t·ªïng quan"""
        header_frame = QFrame()
        header_frame.setObjectName("tableCard")
        header_layout = QVBoxLayout(header_frame)
        header_layout.setContentsMargins(20, 15, 20, 15)

        # Ti√™u ƒë·ªÅ ch√≠nh
        title = QLabel("üîß CHI TI·∫æT Y√äU C·∫¶U B·∫¢O TR√å")
        title.setObjectName("Title")
        title.setAlignment(Qt.AlignCenter)
        header_layout.addWidget(title)

        # Th√¥ng tin c∆° b·∫£n
        info_layout = QHBoxLayout()

        # Th√¥ng tin ph√≤ng
        room_info = QLabel(f"üìç Ph√≤ng: {self.request_data.get('room_name', 'N/A')}")
        room_info.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: 600;
                color: #2c3e50;
                padding: 8px 12px;
                background-color: #ecf0f1;
                border-radius: 8px;
            }
        """)
        info_layout.addWidget(room_info)

        # Tr·∫°ng th√°i hi·ªán t·∫°i
        status = self.request_data.get('status', 'N/A')
        status_color = self.get_status_color(status)
        status_label = QLabel(f"üìä Tr·∫°ng th√°i: {status}")
        status_label.setStyleSheet(f"""
            QLabel {{
                font-size: 16px;
                font-weight: 600;
                color: white;
                padding: 8px 12px;
                background-color: {status_color};
                border-radius: 8px;
            }}
        """)
        info_layout.addWidget(status_label)

        # M·ª©c ƒë·ªô kh·∫©n c·∫•p
        urgency = self.request_data.get('urgency_level', 'N/A')
        urgency_color = "#e74c3c" if urgency == "Kh·∫©n c·∫•p" else "#f39c12"
        urgency_label = QLabel(f"üö® M·ª©c ƒë·ªô: {urgency}")
        urgency_label.setStyleSheet(f"""
            QLabel {{
                font-size: 16px;
                font-weight: 600;
                color: white;
                padding: 8px 12px;
                background-color: {urgency_color};
                border-radius: 8px;
            }}
        """)
        info_layout.addWidget(urgency_label)

        header_layout.addLayout(info_layout)
        layout.addWidget(header_frame)

    def create_basic_info_section(self, layout):
        """T·∫°o section th√¥ng tin c∆° b·∫£n"""
        group_box = QGroupBox("üìã Th√¥ng tin c∆° b·∫£n")
        group_box.setProperty("theme", "blue")
        group_layout = QGridLayout(group_box)
        group_layout.setSpacing(10)

        # C√°c th√¥ng tin c∆° b·∫£n
        basic_info = [
            ("M√£ y√™u c·∫ßu:", self.request_data.get('request_id', 'N/A')),
            ("Ng∆∞·ªùi thu√™:", self.request_data.get('tenant_name', 'N/A')),
            ("Ng√†y t·∫°o:", self.request_data.get('created_at', 'N/A')),
            ("Lo·∫°i s·ª± c·ªë:", self.request_data.get('issue_type', 'N/A'))
        ]

        for i, (label_text, value) in enumerate(basic_info):
            row = i // 2
            col = (i % 2) * 2

            label = QLabel(label_text)
            label.setObjectName("keyLabel")
            group_layout.addWidget(label, row, col)

            value_label = QLabel(str(value))
            value_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    color: #2c3e50;
                    padding: 6px 8px;
                    background-color: #f8f9fa;
                    border-radius: 4px;
                    border: 1px solid #dee2e6;
                }
            """)
            group_layout.addWidget(value_label, row, col + 1)

        layout.addWidget(group_box)

    def create_issue_details_section(self, layout):
        """T·∫°o section chi ti·∫øt s·ª± c·ªë"""
        group_box = QGroupBox("üìù Chi ti·∫øt s·ª± c·ªë")
        group_box.setProperty("theme", "blue")
        group_box.setFixedHeight(150)
        group_layout = QVBoxLayout(group_box)

        # M√¥ t·∫£ chi ti·∫øt
        self.description_display = QTextEdit()
        self.description_display.setReadOnly(True)
        self.description_display.setMinimumHeight(120)
        '''
        self.description_display.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 10px;
                font-size: 14px;
                line-height: 1.5;
            }
        """)
        '''
        group_layout.addWidget(self.description_display)

        layout.addWidget(group_box)

    def create_contact_info_section(self, layout):
        """T·∫°o section th√¥ng tin li√™n h·ªá"""
        group_box = QGroupBox("üìû Th√¥ng tin li√™n h·ªá")
        group_box.setProperty("theme", "blue")
        group_layout = QGridLayout(group_box)

        # S·ªë ƒëi·ªán tho·∫°i
        phone_label = QLabel("S·ªë ƒëi·ªán tho·∫°i:")
        phone_label.setObjectName("keyLabel")
        group_layout.addWidget(phone_label, 0, 0)

        phone_value = QLabel(self.request_data.get('contact_phone', 'Ch∆∞a c·∫≠p nh·∫≠t'))
        phone_value.setStyleSheet("""
            QLabel {
                font-size: 14px;
                color: #2c3e50;
                padding: 6px 8px;
                background-color: #f8f9fa;
                border-radius: 4px;
                border: 1px solid #dee2e6;
            }
        """)
        group_layout.addWidget(phone_value, 0, 1)

        # Th·ªùi gian thu·∫≠n ti·ªán li√™n h·ªá (n·∫øu c√≥)
        if 'available_time' in self.request_data:
            time_label = QLabel("Th·ªùi gian thu·∫≠n ti·ªán:")
            time_label.setObjectName("keyLabel")
            group_layout.addWidget(time_label, 1, 0)

            time_value = QLabel(self.request_data.get('available_time', 'Kh√¥ng x√°c ƒë·ªãnh'))
            time_value.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    color: #2c3e50;
                    padding: 6px 8px;
                    background-color: #f8f9fa;
                    border-radius: 4px;
                    border: 1px solid #dee2e6;
                }
            """)
            group_layout.addWidget(time_value, 1, 1)

        layout.addWidget(group_box)

    def create_image_section(self, layout):
        """T·∫°o section hi·ªÉn th·ªã h√¨nh ·∫£nh"""
        group_box = QGroupBox("üì∑ H√¨nh ·∫£nh minh h·ªça")
        group_box.setProperty("theme", "blue")
        group_layout = QVBoxLayout(group_box)

        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setMinimumHeight(200)
        self.image_label.setStyleSheet("""
            QLabel {
                border: 2px dashed #bdc3c7;
                border-radius: 8px;
                background-color: #f8f9fa;
                color: #7f8c8d;
                font-size: 14px;
            }
        """)

        # Ki·ªÉm tra v√† hi·ªÉn th·ªã h√¨nh ·∫£nh
        image_path = self.request_data.get('image_path', '')
        if image_path and os.path.exists(image_path):
            pixmap = QPixmap(image_path)
            if not pixmap.isNull():
                # Scale ·∫£nh ƒë·ªÉ v·ª´a v·ªõi label
                scaled_pixmap = pixmap.scaled(
                    400, 200,
                    Qt.KeepAspectRatio,
                    Qt.SmoothTransformation
                )
                self.image_label.setPixmap(scaled_pixmap)
            else:
                self.image_label.setText("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh")
        else:
            self.image_label.setText("üì∑ Kh√¥ng c√≥ h√¨nh ·∫£nh minh h·ªça")

        group_layout.addWidget(self.image_label)
        layout.addWidget(group_box)

    def create_status_management_section(self, layout):
        """T·∫°o section qu·∫£n l√Ω tr·∫°ng th√°i"""
        group_box = QGroupBox("‚öôÔ∏è Qu·∫£n l√Ω tr·∫°ng th√°i")
        group_box.setProperty("theme", "blue")
        group_layout = QVBoxLayout(group_box)

        # Combo box ch·ªçn tr·∫°ng th√°i m·ªõi
        status_layout = QHBoxLayout()

        status_label = QLabel("C·∫≠p nh·∫≠t tr·∫°ng th√°i:")
        status_label.setObjectName("keyLabel")
        status_layout.addWidget(status_label)

        self.status_combo = QComboBox()
        self.status_combo.addItems([
            "Pending",
            "ƒêang x·ª≠ l√Ω",
            "Ch·ªù ph·ª• t√πng",
            "Ho√†n th√†nh",
            "H·ªßy b·ªè"
        ])

        # Set tr·∫°ng th√°i hi·ªán t·∫°i
        current_status = self.request_data.get('status', 'Pending')
        if current_status in [self.status_combo.itemText(i) for i in range(self.status_combo.count())]:
            self.status_combo.setCurrentText(current_status)

        status_layout.addWidget(self.status_combo)

        # N√∫t c·∫≠p nh·∫≠t tr·∫°ng th√°i
        self.update_status_btn = QPushButton("üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i")
        self.update_status_btn.clicked.connect(self.update_status)
        status_layout.addWidget(self.update_status_btn)

        status_layout.addStretch()
        group_layout.addLayout(status_layout)

        layout.addWidget(group_box)

    def create_notes_section(self, layout):
        """T·∫°o section ghi ch√∫ c·ªßa qu·∫£n l√Ω"""
        group_box = QGroupBox("üìã Ghi ch√∫ qu·∫£n l√Ω")
        group_box.setProperty("theme", "blue")
        group_box.setFixedHeight(220)
        group_layout = QVBoxLayout(group_box)

        self.notes_edit = QTextEdit()
        self.notes_edit.setPlaceholderText(
            "Ghi ch√∫ c·ªßa qu·∫£n l√Ω v·ªÅ qu√° tr√¨nh x·ª≠ l√Ω y√™u c·∫ßu...\n"
            "- Nguy√™n nh√¢n s·ª± c·ªë\n"
            "- C√°ch kh·∫Øc ph·ª•c\n"
            "- Chi ph√≠ ∆∞·ªõc t√≠nh\n"
            "- Th·ªùi gian ho√†n th√†nh d·ª± ki·∫øn"
        )
        self.notes_edit.setMinimumHeight(100)
        self.notes_edit.setText(self.request_data.get('admin_notes', ''))

        group_layout.addWidget(self.notes_edit)

        # N√∫t l∆∞u ghi ch√∫
        save_notes_btn = QPushButton("üíæ L∆∞u ghi ch√∫")
        save_notes_btn.clicked.connect(self.save_notes)
        group_layout.addWidget(save_notes_btn)

        layout.addWidget(group_box)

    def create_action_buttons(self, layout):
        """T·∫°o c√°c n√∫t h√†nh ƒë·ªông"""
        btn_layout = QHBoxLayout()
        btn_layout.addStretch()

        # N√∫t in b√°o c√°o
        print_btn = QPushButton("üñ®Ô∏è In b√°o c√°o")
        print_btn.clicked.connect(self.print_report)
        btn_layout.addWidget(print_btn)

        # N√∫t ƒë√≥ng
        close_btn = QPushButton("‚ùå ƒê√≥ng")
        close_btn.setObjectName("CancelBtn")
        close_btn.clicked.connect(self.close)
        btn_layout.addWidget(close_btn)

        layout.addLayout(btn_layout)

    def populate_data(self):
        """ƒêi·ªÅn d·ªØ li·ªáu v√†o c√°c widget"""
        # ƒêi·ªÅn m√¥ t·∫£ chi ti·∫øt
        description = self.request_data.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt')
        self.description_display.setText(description)

    def get_status_color(self, status):
        """L·∫•y m√†u t∆∞∆°ng ·ª©ng v·ªõi tr·∫°ng th√°i"""
        status_colors = {
            'Pending': '#e74c3c',
            'ƒêang x·ª≠ l√Ω': '#f39c12',
            'Ch·ªù ph·ª• t√πng': '#9b59b6',
            'Ho√†n th√†nh': '#27ae60',
            'H·ªßy b·ªè': '#95a5a6'
        }
        return status_colors.get(status, '#34495e')

    def update_status(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu"""
        new_status = self.status_combo.currentText()
        current_status = self.request_data.get('status', '')

        if new_status == current_status:
            QMessageBox.information(self, "Th√¥ng b√°o", "Tr·∫°ng th√°i kh√¥ng thay ƒë·ªïi!")
            return

        # X√°c nh·∫≠n thay ƒë·ªïi
        confirmed = ConfirmDialog.ask(
            self,
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thay ƒë·ªïi tr·∫°ng th√°i t·ª´ '{current_status}' th√†nh '{new_status}'?"
        )

        if confirmed == QMessageBox.Yes:
            try:
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i trong data
                self.request_data['status'] = new_status

                # Emit signal ƒë·ªÉ th√¥ng b√°o cho parent widget
                self.status_updated.emit(
                    self.request_data.get('request_id', 0),
                    new_status
                )

                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                SuccessDialog.show(
                    self,
                    f"ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh '{new_status}' th√†nh c√¥ng!"
                )

                # C·∫≠p nh·∫≠t l·∫°i header ƒë·ªÉ reflect tr·∫°ng th√°i m·ªõi
                self.refresh_header()

                # TODO: G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t database
                # MaintenanceService.update_status(request_id, new_status)

            except Exception as e:
                QMessageBox.critical(
                    self,
                    "L·ªói",
                    f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i: {str(e)}"
                )

    def save_notes(self):
        """L∆∞u ghi ch√∫ qu·∫£n l√Ω"""
        notes = self.notes_edit.toPlainText().strip()

        try:
            # C·∫≠p nh·∫≠t ghi ch√∫ trong data
            self.request_data['admin_notes'] = notes

            QMessageBox.information(self, "Th√†nh c√¥ng", "ƒê√£ l∆∞u ghi ch√∫ th√†nh c√¥ng!")

            # TODO: G·ªçi service ƒë·ªÉ l∆∞u ghi ch√∫ v√†o database
            # MaintenanceService.update_notes(request_id, notes)

        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u ghi ch√∫: {str(e)}")

    def print_report(self):
        """In b√°o c√°o chi ti·∫øt y√™u c·∫ßu b·∫£o tr√¨"""
        try:
            # T·∫°o n·ªôi dung b√°o c√°o
            report_content = self.generate_report_content()

            # TODO: Implement ch·ª©c nƒÉng in th·ª±c t·∫ø
            QMessageBox.information(
                self,
                "In b√°o c√°o",
                "Ch·ª©c nƒÉng in b√°o c√°o s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai trong phi√™n b·∫£n ti·∫øp theo."
            )

        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ in b√°o c√°o: {str(e)}")

    def generate_report_content(self):
        """T·∫°o n·ªôi dung b√°o c√°o"""
        report = f"""
        B√ÅO C√ÅO CHI TI·∫æT Y√äU C·∫¶U B·∫¢O TR√å
        =====================================

        M√£ y√™u c·∫ßu: {self.request_data.get('request_id', 'N/A')}
        Ph√≤ng: {self.request_data.get('room_name', 'N/A')}
        Ng∆∞·ªùi thu√™: {self.request_data.get('tenant_name', 'N/A')}
        Ng√†y t·∫°o: {self.request_data.get('created_at', 'N/A')}

        TH√îNG TIN S·ª∞ C·ªê
        ---------------
        Lo·∫°i s·ª± c·ªë: {self.request_data.get('issue_type', 'N/A')}
        M·ª©c ƒë·ªô: {self.request_data.get('urgency_level', 'N/A')}
        Tr·∫°ng th√°i: {self.request_data.get('status', 'N/A')}

        M√î T·∫¢ CHI TI·∫æT
        --------------
        {self.request_data.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}

        TH√îNG TIN LI√äN H·ªÜ
        ------------------
        SƒêT: {self.request_data.get('contact_phone', 'N/A')}

        GHI CH√ö QU·∫¢N L√ù
        ----------------
        {self.request_data.get('admin_notes', 'Ch∆∞a c√≥ ghi ch√∫')}

        Ng√†y in: {datetime.now().strftime('%d/%m/%Y %H:%M')}
        """
        return report

    def refresh_header(self):
        """Refresh l·∫°i header sau khi c·∫≠p nh·∫≠t tr·∫°ng th√°i"""
        # TODO: Implement logic refresh header n·∫øu c·∫ßn
        pass

    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
        event.accept()