from PyQt5.QtWidgets import (QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout,
                             QFrame, QApplication, QLineEdit, QSizePolicy, QMessageBox)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
import sys

from QLNHATRO.RentalManagementApplication.Repository.LoginRepository import LoginRepository
from QLNHATRO.RentalManagementApplication.frontend.Style.GlobalStyle import GlobalStyle
from QLNHATRO.RentalManagementApplication.services.OTPService import OTPService
from QLNHATRO.RentalManagementApplication.utils.Validators import Validators


class ChangePasswordView(QWidget):
    def __init__(self, on_success_callback=None):
        super().__init__()
        self.setStyleSheet(GlobalStyle.global_stylesheet())
        self.setWindowTitle("ƒê·ªïi m·∫≠t kh·∫©u")
        #self.setStyleSheet("background-color: white; border-radius: 40px;")
        self.setMinimumSize(850, 820)
        self.on_success_callback = on_success_callback

        layout = QVBoxLayout(self)
        layout.setContentsMargins(84, 24, 84, 24)
        layout.setSpacing(10)

        # Header
        header_frame = QFrame()
        header_layout = QVBoxLayout(header_frame)

        header_label = QLabel("üîí ƒê·ªïi m·∫≠t kh·∫©u")
        header_label.setObjectName("Title")  # S·∫Ω d√πng style QLabel#Title t·ª´ GlobalStyle
        header_label.setFixedHeight(60)
        header_label.setAlignment(Qt.AlignCenter)

        header_layout.addWidget(header_label)

        subtext = QLabel("Vui l√≤ng nh·∫≠p th√¥ng tin ƒë·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u c·ªßa b·∫°n")
        subtext.setAlignment(Qt.AlignCenter)
        subtext.setStyleSheet("color: #202E66; font-size: 14px;")

        header_layout.addWidget(subtext)
        layout.addWidget(header_frame)

        # Form fields
        self.create_username_field(layout, "T√™n ng∆∞·ªùi d√πng:", "username")
        self.create_password_field(layout, "M·∫≠t kh·∫©u hi·ªán t·∫°i:", "current_password", True)
        self.create_password_field(layout, "M·∫≠t kh·∫©u m·ªõi:", "new_password", True)
        self.create_password_field(layout, "X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi:", "confirm_password", True)

        # Password requirements
        self.add_password_requirements(layout)

        # Change Password button
        change_button = QPushButton("ƒê·ªïi m·∫≠t kh·∫©u")
        change_button.setFixedWidth(256)
        change_button.setFixedHeight(60)
        change_button.clicked.connect(self.on_submit)
        button_wrapper = QHBoxLayout()
        button_wrapper.addStretch()
        button_wrapper.addWidget(change_button)
        button_wrapper.addStretch()
        layout.addLayout(button_wrapper)

        # Add spacer at bottom
        layout.addStretch()

    def create_username_field(self, parent_layout, label_text, object_name):
        field_frame = QFrame()
        field_frame.setFixedHeight(100)
        field_frame.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)

        layout = QVBoxLayout(field_frame)
        layout.setContentsMargins(20, 10, 20, 10)
        layout.setSpacing(5)

        label = QLabel(label_text)
        label.setFont(QFont("Be Vietnam", 14, QFont.Bold))
        layout.addWidget(label)

        text_field = QLineEdit()
        text_field.setObjectName(object_name)
        text_field.setFixedHeight(40)
        text_field.setFixedWidth(600)  # ‚¨ÖÔ∏è Th√™m d√≤ng n√†y

        layout.addWidget(text_field)
        setattr(self, object_name + "_input", text_field)  # G√°n ƒë·ªÉ d·ªÖ truy c·∫≠p
        parent_layout.addWidget(field_frame)

    def create_password_field(self, parent_layout, label_text, object_name, is_password=False):
        field_frame = QFrame()
        field_frame.setFixedHeight(100)
        field_frame.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)


        layout = QVBoxLayout(field_frame)
        layout.setContentsMargins(20, 10, 20, 10)
        layout.setSpacing(5)

        # Label
        label = QLabel(label_text)
        label.setFont(QFont("Be Vietnam", 14, QFont.Bold))
        #label.setStyleSheet("color: #202E66; border: none;")
        layout.addWidget(label)

        # Text field
        text_field = QLineEdit()
        text_field.setObjectName(object_name)
        #text_field.setFont(QFont("Be Vietnam", 12))
        text_field.setFixedHeight(40)
        setattr(self, object_name + "_input", text_field)

        if is_password:
            text_field.setEchoMode(QLineEdit.Password)

            # Add show/hide password toggle
            input_layout = QHBoxLayout()
            input_layout.setContentsMargins(0, 0, 0, 0)
            input_layout.setSpacing(0)

            input_layout.addWidget(text_field)

            toggle_btn = QPushButton("üëÅÔ∏è")
            toggle_btn.setFixedWidth(40)
            toggle_btn.setStyleSheet("background-color: white")
            toggle_btn.clicked.connect(lambda: self.toggle_password_visibility(text_field))
            input_layout.addWidget(toggle_btn)

            layout.addLayout(input_layout)
        else:
            layout.addWidget(text_field)


        parent_layout.addWidget(field_frame)
        return text_field

    def toggle_password_visibility(self, text_field):
        if text_field.echoMode() == QLineEdit.Password:
            text_field.setEchoMode(QLineEdit.Normal)
        else:
            text_field.setEchoMode(QLineEdit.Password)

    def add_password_requirements(self, layout):
        req_frame = QFrame()
        req_frame.setStyleSheet("border: none;")
        req_layout = QVBoxLayout(req_frame)

        req_title = QLabel("M·∫≠t kh·∫©u ph·∫£i ƒë√°p ·ª©ng c√°c y√™u c·∫ßu sau:")
        req_title.setFont(QFont("Be Vietnam", 12, QFont.Bold))
        req_title.setStyleSheet("color: #202E66;")
        req_layout.addWidget(req_title)

        requirements = [
            "‚Ä¢ T·ªëi thi·ªÉu 8 k√Ω t·ª±",
            "‚Ä¢ Bao g·ªìm √≠t nh·∫•t 1 ch·ªØ c√°i vi·∫øt hoa",
            "‚Ä¢ Bao g·ªìm √≠t nh·∫•t 1 ch·ªØ s·ªë",
            "‚Ä¢ Bao g·ªìm √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát (!, @, #, $, v.v.)"
        ]

        for req in requirements:
            req_label = QLabel(req)
            req_label.setFont(QFont("Be Vietnam", 8))
            req_label.setStyleSheet("color: #202E66; font-style: italic;")
            req_layout.addWidget(req_label)

        layout.addWidget(req_frame)

    def on_submit(self):
        username = self.username_input.text().strip()
        current_password = self.current_password_input.text()
        new_password = self.new_password_input.text()
        confirm_password = self.confirm_password_input.text()

        # Ki·ªÉm tra ƒë·∫ßy ƒë·ªß th√¥ng tin
        if not all([username, current_password, new_password, confirm_password]):
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.")
            return

        if not Validators.is_alpha_only(username.replace(" ", "")):
            QMessageBox.warning(self, "L·ªói", "T√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá (ch·ªâ ch·ª©a ch·ªØ c√°i v√† kh√¥ng d·∫•u).")
            return

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng username
        if " " in username or len(username) < 4:
            QMessageBox.warning(self, "L·ªói",
                                "T√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá (kh√¥ng ƒë∆∞·ª£c c√≥ kho·∫£ng tr·∫Øng v√† ph·∫£i ‚â• 4 k√Ω t·ª±).")
            return

        # Ki·ªÉm tra tr√πng kh·ªõp m·∫≠t kh·∫©u
        if new_password != confirm_password:
            QMessageBox.warning(self, "L·ªói", "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp.")
            return

        # Ki·ªÉm tra y√™u c·∫ßu m·∫≠t kh·∫©u
        if not Validators.is_valid_password(new_password):
            QMessageBox.warning(self, "L·ªói", "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë√°p ·ª©ng y√™u c·∫ßu b·∫£o m·∫≠t.")
            return

        if OTPService.check_change_password(username,current_password):  # ƒê√¢y ch·ªâ l√† gi·∫£ l·∫≠p, b·∫°n n√™n thay b·∫±ng ki·ªÉm tra th·∫≠t
            QMessageBox.critical(self, "L·ªói", "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.")
            return

        LoginRepository.change_password_into_database(username,new_password)
        # N·∫øu m·ªçi th·ª© ƒë·ªÅu h·ª£p l·ªá
        #print("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng.")
        QMessageBox.information(self, "Th√†nh c√¥ng", "M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!")

        if self.on_success_callback:
            self.on_success_callback()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ChangePasswordView()
    window.show()
    sys.exit(app.exec_())