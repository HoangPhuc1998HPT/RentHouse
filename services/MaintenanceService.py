from _datetime import datetime
from typing import List, Dict, Optional, Any

from RentalManagementApplication.Repository.MaintenanceRepository import MaintenanceRepository



class MaintenanceService:


    @staticmethod
    def create_maintenance_request(room_id: int, tenant_id: int, request_data: Dict) -> Dict:
        """
        T·∫°o y√™u c·∫ßu b·∫£o tr√¨ m·ªõi (DB) v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng dict:
        {
            'success': bool,
            'message': str,
            'request_id': int (n·∫øu th√†nh c√¥ng)
        }
        """
        try:
            # 1. Validate tenant_id, room_id
            if not isinstance(room_id, int) or room_id <= 0:
                return {'success': False, 'message': 'Room ID kh√¥ng h·ª£p l·ªá'}
            if not isinstance(tenant_id, int) or tenant_id <= 0:
                return {'success': False, 'message': 'Tenant ID kh√¥ng h·ª£p l·ªá'}

            # 2. Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc trong request_data
            required_fields = ['issue_type', 'urgency_level', 'description']
            for field in required_fields:
                if not request_data.get(field):
                    return {
                        'success': False,
                        'message': f'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: {field}'
                    }

            # 3. Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
            valid_issue_types = ['ƒêi·ªán', 'N∆∞·ªõc', 'C·∫•u tr√∫c', 'ƒêi·ªÅu h√≤a', 'Kh√°c']
            valid_urgency_levels = ['Kh·∫©n c·∫•p', 'B√¨nh th∆∞·ªùng', 'Th·∫•p']
            if request_data['issue_type'] not in valid_issue_types:
                return {
                    'success': False,
                    'message': f'Lo·∫°i s·ª± c·ªë kh√¥ng h·ª£p l·ªá. Ch·ªçn m·ªôt trong: {", ".join(valid_issue_types)}'
                }
            if request_data['urgency_level'] not in valid_urgency_levels:
                return {
                    'success': False,
                    'message': f'M·ª©c ƒë·ªô kh·∫©n c·∫•p kh√¥ng h·ª£p l·ªá. Ch·ªçn m·ªôt trong: {", ".join(valid_urgency_levels)}'
                }

            # 4. G·ªçi Repository ƒë·ªÉ ch√®n
            new_id = MaintenanceRepository.create_maintenance_request(
                tenant_id=tenant_id,
                room_id=room_id,
                issue_type=request_data['issue_type'],
                urgency_level=request_data['urgency_level'],
                description=request_data['description'],
                contact_phone=request_data.get('contact_phone'),
                available_time=request_data.get('available_time'),
                discovery_date=request_data.get('discovery_date'),
                image_path=request_data.get('image_path')
            )
            if new_id is None:
                return {'success': False, 'message': 'Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu b·∫£o tr√¨. Vui l√≤ng th·ª≠ l·∫°i.'}

            return {
                'success': True,
                'message': 'ƒê√£ t·∫°o y√™u c·∫ßu b·∫£o tr√¨ th√†nh c√¥ng',
                'request_id': new_id
            }

        except Exception as e:
            print(f"‚ùå [Service] L·ªói create_maintenance_request: {e}")
            return {'success': False, 'message': f'L·ªói h·ªá th·ªëng: {e}'}

    @staticmethod
    def get_requests_by_room_id(room_id: int) -> List[Dict]:
        """
        L·∫•y y√™u c·∫ßu b·∫£o tr√¨ (format) theo room_id.
        """
        try:
            if not isinstance(room_id, int) or room_id <= 0:
                print("‚ùå [Service] Room ID kh√¥ng h·ª£p l·ªá")
                return []

            raw = MaintenanceRepository.get_requests_by_room_id(room_id)
            return [MaintenanceService._format_maintenance_request(r) for r in raw]

        except Exception as e:
            print(f"‚ùå [Service] L·ªói get_requests_by_room_id: {e}")
            return []

    @staticmethod
    def get_maintenance_list(landlord_id: int) -> List[Dict[str, Any]]:
        # 1. Validate
        if not isinstance(landlord_id, int) or landlord_id <= 0:
            print("[Service] Landlord ID kh√¥ng h·ª£p l·ªá")
            return []

        # 2. L·∫•y object
        raw_objs = MaintenanceRepository.get_maintenance_requests_by_landlord(landlord_id)
        print(f"[DEBUG] raw_objs count = {len(raw_objs)}")
        if raw_objs:
            # In th·ª≠ object ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra mapping
            print("[DEBUG] sample raw_obj.__dict__ =", raw_objs[0].__dict__)

        # 3. Convert ‚Üí dict v√† inject stt
        formatted = []
        for idx, obj in enumerate(raw_objs, start=1):
            data: Dict[str, Any] = obj.__dict__.copy()
            data['stt'] = idx

            # 4. G·ªçi formatter
            formatted.append(MaintenanceService._format_maintenance_request(data))

        print(f"‚úÖ [Service] L·∫•y ƒë∆∞·ª£c {len(formatted)} y√™u c·∫ßu b·∫£o tr√¨ cho landlord {landlord_id}")
        return formatted

    @staticmethod
    def get_requests_by_tenant_id(tenant_id: int) -> List[Dict]:
        """
        L·∫•y y√™u c·∫ßu b·∫£o tr√¨ (format) theo tenant_id.
        """
        try:
            if not isinstance(tenant_id, int) or tenant_id <= 0:
                print("‚ùå [Service] Tenant ID kh√¥ng h·ª£p l·ªá")
                return []

            raw = MaintenanceRepository.get_requests_by_tenant_id(tenant_id)
            return [MaintenanceService._format_maintenance_request(r) for r in raw]

        except Exception as e:
            print(f"‚ùå [Service] L·ªói get_requests_by_tenant_id: {e}")
            return []

    @staticmethod
    def _format_maintenance_request(request: Dict) -> Dict:
        """
        Format m·ªôt maintenance request ƒë·ªÉ hi·ªÉn th·ªã:
        - format created_at th√†nh "DD/MM/YYYY"
        - √°nh x·∫° status, urgency, issue_type sang ti·∫øng Vi·ªát c√≥ icon
        """
        try:
            # 1. Format created_at (n·∫øu c√≥ ch·ªØ "T", d√πng fromisoformat; n·∫øu v·∫´n c√≤n kho·∫£ng tr·∫Øng, thay b·∫±ng 'T')
            created_at = request.get('created_at', '')
            formatted_date = 'N/A'
            if created_at:
                try:
                    # N·∫øu d·∫°ng "YYYY-MM-DD HH:MM:SS", chuy·ªÉn space->T
                    if ' ' in created_at:
                        created_at = created_at.replace(' ', 'T')
                    dt = datetime.fromisoformat(created_at)
                    formatted_date = dt.strftime('%d/%m/%Y')
                except Exception:
                    # Fallback l·∫•y 10 k√Ω t·ª± ƒë·∫ßu
                    formatted_date = created_at[:10]

            # 2. Format status
            status = request.get('status', '')
            status_mapping = {
                'Pending': '‚è≥ Ch·ªù x·ª≠ l√Ω',
                'In Progress': 'üîÑ ƒêang x·ª≠ l√Ω',
                'Resolved': '‚úÖ ƒê√£ ho√†n th√†nh',
                'ƒêang x·ª≠ l√Ω': 'üîÑ ƒêang x·ª≠ l√Ω',
                'ƒê√£ ho√†n th√†nh': '‚úÖ ƒê√£ ho√†n th√†nh'
            }
            formatted_status = status_mapping.get(status, status or 'Unknown')

            # 3. Format urgency
            urgency = request.get('urgency_level', '')
            urgency_mapping = {
                'Kh·∫©n c·∫•p': 'üö® Kh·∫©n c·∫•p',
                'B√¨nh th∆∞·ªùng': 'üìù B√¨nh th∆∞·ªùng',
                'Th·∫•p': 'üîª Th·∫•p'
            }
            formatted_urgency = urgency_mapping.get(urgency, urgency or '')

            # 4. Format issue_type
            issue_type = request.get('issue_type', '')
            issue_type_mapping = {
                'ƒêi·ªán': '‚ö° ƒêi·ªán',
                'N∆∞·ªõc': 'üíß N∆∞·ªõc',
                'C·∫•u tr√∫c': 'üèóÔ∏è C·∫•u tr√∫c',
                'ƒêi·ªÅu h√≤a': '‚ùÑÔ∏è ƒêi·ªÅu h√≤a',
                'Kh√°c': 'üîß Kh√°c'
            }
            formatted_issue_type = issue_type_mapping.get(issue_type, f"üîß {issue_type}")

            # 5. Tr·∫£ v·ªÅ dict m·ªõi ƒë√£ format
            return {
                'stt': request.get('stt', 0),
                'request_id': request.get('request_id'),
                'room_id': request.get('room_id'),
                'room_name': request.get('room_name', 'N/A'),
                'tenant_id': request.get('tenant_id'),
                'tenant_name': request.get('tenant_name', 'N/A'),
                'tenant_phone': request.get('tenant_phone', ''),
                'issue_type': formatted_issue_type,
                'urgency_level': formatted_urgency,
                'description': request.get('description', ''),
                'contact_phone': request.get('contact_phone', request.get('tenant_phone', '')),
                'available_time': request.get('available_time', ''),
                'discovery_date': request.get('discovery_date', ''),
                'image_path': request.get('image_path', ''),
                'status': formatted_status,
                'created_at': formatted_date,
                # Raw values ƒë·ªÉ n·∫øu c·∫ßn x·ª≠ l√Ω th√™m ·ªü UI/Controller
                'raw_status': request.get('status', ''),
                'raw_urgency': request.get('urgency_level', ''),
                'raw_issue_type': request.get('issue_type', '')
            }

        except Exception as e:
            print(f"‚ùå [Service] L·ªói format maintenance request: {e}")
            return request

    @staticmethod
    def get_maintenance_detail(request_id: int) -> Optional[Dict]:
        """
        L·∫•y chi ti·∫øt m·ªôt y√™u c·∫ßu b·∫£o tr√¨ ƒë√£ format s·∫µn.
        """
        try:
            if not isinstance(request_id, int) or request_id <= 0:
                print("‚ùå [Service] Request ID kh√¥ng h·ª£p l·ªá")
                return None

            raw = MaintenanceRepository.get_maintenance_request_by_id(request_id)
            if not raw:
                return None

            return MaintenanceService._format_maintenance_request(raw)

        except Exception as e:
            print(f"‚ùå [Service] L·ªói get_maintenance_detail: {e}")
            return None

    @staticmethod
    def update_maintenance_status(request_id: int, new_status: str) -> Dict:
        """
        C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa m·ªôt y√™u c·∫ßu.
        Tr·∫£ v·ªÅ dict: {'success': bool, 'message': str}
        """
        try:
            # 1. Validate input
            if not isinstance(request_id, int) or request_id <= 0:
                return {'success': False, 'message': 'ID y√™u c·∫ßu kh√¥ng h·ª£p l·ªá'}
            if not new_status:
                return {'success': False, 'message': 'Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}

            valid_statuses = ['Pending', 'In Progress', 'Resolved', 'ƒêang x·ª≠ l√Ω', 'ƒê√£ ho√†n th√†nh']
            if new_status not in valid_statuses:
                return {'success': False,
                        'message': f'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªçn m·ªôt trong: {", ".join(valid_statuses)}'}

            # 2. Th·ª±c hi·ªán update qua Repository
            success = MaintenanceRepository.update_maintenance_status(request_id, new_status)
            if success:
                return {'success': True, 'message': f'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "{new_status}"'}
            else:
                return {'success': False, 'message': 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ho·∫∑c kh√¥ng th·ªÉ c·∫≠p nh·∫≠t'}

        except Exception as e:
            print(f"‚ùå [Service] L·ªói update_maintenance_status: {e}")
            return {'success': False, 'message': f'L·ªói h·ªá th·ªëng: {e}'}

    @staticmethod
    def get_maintenance_statistics(landlord_id: int) -> Dict:
        """
        L·∫•y th·ªëng k√™ cho landlord (n·∫øu kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ 0 cho m·ªói field).
        """
        try:
            if not isinstance(landlord_id, int) or landlord_id <= 0:
                print("‚ùå [Service] Landlord ID kh√¥ng h·ª£p l·ªá")
                return {
                    'total_requests': 0,
                    'pending_count': 0,
                    'in_progress_count': 0,
                    'resolved_count': 0,
                    'urgent_count': 0
                }

            stats = MaintenanceRepository.get_maintenance_statistics(landlord_id)
            if not stats:
                return {
                    'total_requests': 0,
                    'pending_count': 0,
                    'in_progress_count': 0,
                    'resolved_count': 0,
                    'urgent_count': 0
                }
            return stats

        except Exception as e:
            print(f"‚ùå [Service] L·ªói get_maintenance_statistics: {e}")
            return {
                'total_requests': 0,
                'pending_count': 0,
                'in_progress_count': 0,
                'resolved_count': 0,
                'urgent_count': 0
            }

    @staticmethod
    def delete_maintenance_request(request_id: int) -> Dict:
        """
        X√≥a m·ªôt y√™u c·∫ßu b·∫£o tr√¨. Tr·∫£ v·ªÅ dict {'success': bool, 'message': str}.
        """
        try:
            if not isinstance(request_id, int) or request_id <= 0:
                return {'success': False, 'message': 'ID y√™u c·∫ßu kh√¥ng h·ª£p l·ªá'}

            success = MaintenanceRepository.delete_maintenance_request(request_id)
            if success:
                return {'success': True, 'message': 'ƒê√£ x√≥a y√™u c·∫ßu b·∫£o tr√¨ th√†nh c√¥ng'}
            else:
                return {'success': False, 'message': 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ho·∫∑c x√≥a kh√¥ng th√†nh c√¥ng'}

        except Exception as e:
            print(f"‚ùå [Service] L·ªói delete_maintenance_request: {e}")
            return {'success': False, 'message': f'L·ªói h·ªá th·ªëng: {e}'}

    @staticmethod
    def filter_by_status(landlord_id: int, status: str) -> List[Dict]:
        """
        L·ªçc y√™u c·∫ßu b·∫£o tr√¨ theo tr·∫°ng th√°i (ho·∫∑c tr·∫£ c·∫£ list n·∫øu status='all').
        """
        try:
            if not isinstance(landlord_id, int) or landlord_id <= 0:
                print("‚ùå [Service] Landlord ID kh√¥ng h·ª£p l·ªá")
                return []

            if status == "all":
                return MaintenanceService.get_maintenance_list(landlord_id)

            raw = MaintenanceRepository.get_maintenance_requests_by_landlord(landlord_id)
            # L·ªçc ·ªü ch√≠nh Service (c≈©ng c√≥ th·ªÉ g·ªçi tr·ª±c ti·∫øp repository.get_by_status n·∫øu c√≥)
            filtered = [r for r in raw if r.get('status') == status]
            return [MaintenanceService._format_maintenance_request(r) for r in filtered]

        except Exception as e:
            print(f"‚ùå [Service] L·ªói filter_by_status: {e}")
            return []

    @staticmethod
    def filter_by_urgency(landlord_id: int, urgency: str) -> List[Dict]:
        """
        L·ªçc y√™u c·∫ßu b·∫£o tr√¨ theo m·ª©c ƒë·ªô kh·∫©n c·∫•p (ho·∫∑c tr·∫£ c·∫£ list n·∫øu urgency='all').
        """
        try:
            if not isinstance(landlord_id, int) or landlord_id <= 0:
                print("‚ùå [Service] Landlord ID kh√¥ng h·ª£p l·ªá")
                return []

            if urgency == "all":
                return MaintenanceService.get_maintenance_list(landlord_id)

            valid_urgencies = ['Kh·∫©n c·∫•p', 'B√¨nh th∆∞·ªùng', 'Th·∫•p']
            if urgency not in valid_urgencies:
                print(f"‚ùå [Service] M·ª©c ƒë·ªô kh·∫©n c·∫•p kh√¥ng h·ª£p l·ªá: {urgency}")
                return []

            raw = MaintenanceRepository.get_maintenance_requests_by_landlord(landlord_id)
            filtered = [r for r in raw if r.get('urgency_level') == urgency]
            formatted = [MaintenanceService._format_maintenance_request(r) for r in filtered]
            print(f"‚úÖ [Service] L·ªçc ƒë∆∞·ª£c {len(formatted)} y√™u c·∫ßu v·ªõi m·ª©c ƒë·ªô '{urgency}' cho landlord {landlord_id}")
            return formatted

        except Exception as e:
            print(f"‚ùå [Service] L·ªói filter_by_urgency: {e}")
            return []
