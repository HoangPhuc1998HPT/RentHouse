import datetime
from typing import List, Dict, Optional

from QLNHATRO.RentalManagementApplication.Repository.MaintenanceRepository import MaintenanceRepository
from QLNHATRO.RentalManagementApplication.backend.model.MaintenanceRequest import MaintenanceRequest


class MaintenanceService:
    @staticmethod
    def create_request(room_id, tenant_id, description, image_path):
        request = MaintenanceRequest(room_id, tenant_id, description, image_path)
        MaintenanceRepository.save_request(request)
        return request

    @staticmethod
    def get_requests_by_room_id(room_id):
        return MaintenanceRepository.get_requests_by_room_id(room_id)

    @staticmethod
    def get_maintenance_list(landlord_id: int) -> List[Dict]:
        """
        L·∫•y danh s√°ch y√™u c·∫ßu b·∫£o tr√¨ cho landlord

        Args:
            landlord_id: ID c·ªßa landlord

        Returns:
            List[Dict]: Danh s√°ch y√™u c·∫ßu b·∫£o tr√¨ ƒë√£ ƒë∆∞·ª£c format
        """
        try:
            '''Ph·∫ßn n√†y l·ªói ====> to√†n b·ªô id s·∫Ω chuy·ªÉn INT ho·∫∑c TEXT h·∫øt'''
            #if not landlord_id or landlord_id <= 0:
                #print("‚ùå Landlord ID kh√¥ng h·ª£p l·ªá")
                #return []

            # L·∫•y d·ªØ li·ªáu t·ª´ repository
            maintenance_requests = MaintenanceRepository.get_maintenance_requests_by_landlord(landlord_id)

            # Format d·ªØ li·ªáu cho UI
            formatted_requests = []
            for request in maintenance_requests:
                formatted_request = MaintenanceService._format_maintenance_request(request)
                formatted_requests.append(formatted_request)

            print(f"‚úÖ L·∫•y ƒë∆∞·ª£c {len(formatted_requests)} y√™u c·∫ßu b·∫£o tr√¨ cho landlord {landlord_id}")
            return formatted_requests

        except Exception as e:
            print(f"‚ùå L·ªói trong MaintenanceService.get_maintenance_list: {e}")
            return []

    @staticmethod
    def _format_maintenance_request(request: Dict) -> Dict:
        """
        Format maintenance request ƒë·ªÉ hi·ªÉn th·ªã tr√™n UI

        Args:
            request: Raw data t·ª´ database

        Returns:
            Dict: Formatted data
        """
        try:
            # Format ng√†y th√°ng
            created_at = request.get('created_at', '')
            if created_at:
                try:
                    # Chuy·ªÉn ƒë·ªïi format ng√†y n·∫øu c·∫ßn
                    dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    formatted_date = dt.strftime('%d/%m/%Y')
                except:
                    formatted_date = created_at[:10]  # L·∫•y ph·∫ßn ng√†y
            else:
                formatted_date = 'N/A'

            # Format tr·∫°ng th√°i
            status = request.get('status', 'Unknown')
            status_mapping = {
                'Pending': '‚è≥ Ch·ªù x·ª≠ l√Ω',
                'In Progress': 'üîÑ ƒêang x·ª≠ l√Ω',
                'Resolved': '‚úÖ ƒê√£ ho√†n th√†nh',
                'ƒêang x·ª≠ l√Ω': 'üîÑ ƒêang x·ª≠ l√Ω',
                'ƒê√£ ho√†n th√†nh': '‚úÖ ƒê√£ ho√†n th√†nh'
            }
            formatted_status = status_mapping.get(status, status)

            # Format m·ª©c ƒë·ªô kh·∫©n c·∫•p
            urgency = request.get('urgency_level', 'B√¨nh th∆∞·ªùng')
            urgency_mapping = {
                'Kh·∫©n c·∫•p': 'üö® Kh·∫©n c·∫•p',
                'B√¨nh th∆∞·ªùng': 'üìù B√¨nh th∆∞·ªùng',
                'Th·∫•p': 'üîª Th·∫•p'
            }
            formatted_urgency = urgency_mapping.get(urgency, urgency)

            # Format lo·∫°i s·ª± c·ªë
            issue_type = request.get('issue_type', '')
            issue_type_mapping = {
                'ƒêi·ªán': '‚ö° ƒêi·ªán',
                'N∆∞·ªõc': 'üíß N∆∞·ªõc',
                'C·∫•u tr√∫c': 'üèóÔ∏è C·∫•u tr√∫c',
                'ƒêi·ªÅu h√≤a': '‚ùÑÔ∏è ƒêi·ªÅu h√≤a',
                'Kh√°c': 'üîß Kh√°c'
            }
            formatted_issue_type = issue_type_mapping.get(issue_type, f"üîß {issue_type}")

            return {
                'stt': request.get('stt', 0),
                'request_id': request.get('request_id'),
                'room_id': request.get('room_id'),
                'room_name': request.get('room_name', 'N/A'),
                'tenant_id': request.get('tenant_id'),
                'tenant_name': request.get('tenant_name', 'N/A'),
                'tenant_phone': request.get('tenant_phone', ''),
                'issue_type': formatted_issue_type,
                'urgency_level': formatted_urgency,
                'description': request.get('description', ''),
                'contact_phone': request.get('contact_phone', request.get('tenant_phone', 'N/A')),
                'available_time': request.get('available_time', ''),
                'discovery_date': request.get('discovery_date', ''),
                'image_path': request.get('image_path', ''),
                'status': formatted_status,
                'created_at': formatted_date,
                # Raw values cho vi·ªác x·ª≠ l√Ω
                'raw_status': request.get('status'),
                'raw_urgency': request.get('urgency_level'),
                'raw_issue_type': request.get('issue_type')
            }

        except Exception as e:
            print(f"‚ùå L·ªói format maintenance request: {e}")
            return request

    @staticmethod
    def get_maintenance_detail(request_id: int) -> Optional[Dict]:
        """
        L·∫•y th√¥ng tin chi ti·∫øt m·ªôt y√™u c·∫ßu b·∫£o tr√¨

        Args:
            request_id: ID c·ªßa y√™u c·∫ßu b·∫£o tr√¨

        Returns:
            Optional[Dict]: Th√¥ng tin chi ti·∫øt ho·∫∑c None
        """
        try:
            if not request_id or request_id <= 0:
                print("‚ùå Request ID kh√¥ng h·ª£p l·ªá")
                return None

            # L·∫•y d·ªØ li·ªáu t·ª´ repository
            request_detail = MaintenanceRepository.get_maintenance_request_by_id(request_id)

            if request_detail:
                return MaintenanceService._format_maintenance_request(request_detail)

            return None

        except Exception as e:
            print(f"‚ùå L·ªói trong MaintenanceService.get_maintenance_detail: {e}")
            return None

    @staticmethod
    def update_maintenance_status(request_id: int, new_status: str) -> Dict:
        """
        C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu b·∫£o tr√¨
        Returns:
            Dict: {'success': bool, 'message': str}
        """
        # Validate input ƒë·∫ßu v√†o
        if not request_id or request_id <= 0:
            return {'success': False, 'message': 'ID y√™u c·∫ßu kh√¥ng h·ª£p l·ªá'}
        if not new_status:
            return {'success': False, 'message': 'Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}
        valid_statuses = ['Pending', 'In Progress', 'Resolved', 'ƒêang x·ª≠ l√Ω', 'ƒê√£ ho√†n th√†nh']
        if new_status not in valid_statuses:
            return {'success': False, 'message': f'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: {", ".join(valid_statuses)}'}

        # Th·ª±c hi·ªán update DB, b·∫Øt exception r√µ r√†ng
        try:
            success = MaintenanceRepository.update_maintenance_status(request_id, new_status)
            if success:
                return {'success': True, 'message': f'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "{new_status}" th√†nh c√¥ng'}
            return {'success': False, 'message': 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i.'}
        except Exception as e:
            # C√≥ th·ªÉ log l·ªói chi ti·∫øt ·ªü ƒë√¢y
            return {'success': False, 'message': f'L·ªói h·ªá th·ªëng: {str(e)}'}

    @staticmethod
    def create_maintenance_request(tenant_id: int, room_id: int, request_data: Dict) -> Dict:
        """
        T·∫°o y√™u c·∫ßu b·∫£o tr√¨ m·ªõi

        Args:
            tenant_id: ID ng∆∞·ªùi thu√™
            room_id: ID ph√≤ng
            request_data: D·ªØ li·ªáu y√™u c·∫ßu b·∫£o tr√¨

        Returns:
            Dict: K·∫øt qu·∫£ thao t√°c
        """
        try:
            # Validate required fields
            required_fields = ['issue_type', 'urgency_level', 'description']
            for field in required_fields:
                if not request_data.get(field):
                    return {
                        'success': False,
                        'message': f'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: {field}'
                    }

            # Validate values
            valid_issue_types = ['ƒêi·ªán', 'N∆∞·ªõc', 'C·∫•u tr√∫c', 'ƒêi·ªÅu h√≤a', 'Kh√°c']
            valid_urgency_levels = ['Kh·∫©n c·∫•p', 'B√¨nh th∆∞·ªùng', 'Th·∫•p']

            if request_data['issue_type'] not in valid_issue_types:
                return {
                    'success': False,
                    'message': f'Lo·∫°i s·ª± c·ªë kh√¥ng h·ª£p l·ªá. Ch·ªçn m·ªôt trong: {", ".join(valid_issue_types)}'
                }

            if request_data['urgency_level'] not in valid_urgency_levels:
                return {
                    'success': False,
                    'message': f'M·ª©c ƒë·ªô kh·∫©n c·∫•p kh√¥ng h·ª£p l·ªá. Ch·ªçn m·ªôt trong: {", ".join(valid_urgency_levels)}'
                }

            # T·∫°o y√™u c·∫ßu trong database
            success = MaintenanceRepository.create_maintenance_request(
                tenant_id=tenant_id,
                room_id=room_id,
                issue_type=request_data['issue_type'],
                urgency_level=request_data['urgency_level'],
                description=request_data['description'],
                contact_phone=request_data.get('contact_phone'),
                available_time=request_data.get('available_time'),
                discovery_date=request_data.get('discovery_date'),
                image_path=request_data.get('image_path')
            )

            if success:
                return {
                    'success': True,
                    'message': 'ƒê√£ t·∫°o y√™u c·∫ßu b·∫£o tr√¨ th√†nh c√¥ng'
                }
            else:
                return {
                    'success': False,
                    'message': 'Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu b·∫£o tr√¨. Vui l√≤ng th·ª≠ l·∫°i.'
                }

        except Exception as e:
            print(f"‚ùå L·ªói trong MaintenanceService.create_maintenance_request: {e}")
            return {
                'success': False,
                'message': f'L·ªói h·ªá th·ªëng: {str(e)}'
            }

    @staticmethod
    def get_maintenance_statistics(landlord_id: int) -> Dict:
        """
        L·∫•y th·ªëng k√™ y√™u c·∫ßu b·∫£o tr√¨

        Args:
            landlord_id: ID c·ªßa landlord

        Returns:
            Dict: Th·ªëng k√™
        """
        try:
            if not landlord_id or landlord_id <= 0:
                print("‚ùå Landlord ID kh√¥ng h·ª£p l·ªá")
                return {}

            stats = MaintenanceRepository.get_maintenance_statistics(landlord_id)

            if not stats:
                return {
                    'total_requests': 0,
                    'pending_count': 0,
                    'in_progress_count': 0,
                    'resolved_count': 0,
                    'urgent_count': 0
                }

            return stats

        except Exception as e:
            print(f"‚ùå L·ªói trong MaintenanceService.get_maintenance_statistics: {e}")
            return {}

    @staticmethod
    def delete_maintenance_request(request_id: int) -> Dict:
        """
        X√≥a y√™u c·∫ßu b·∫£o tr√¨

        Args:
            request_id: ID c·ªßa y√™u c·∫ßu b·∫£o tr√¨

        Returns:
            Dict: K·∫øt qu·∫£ thao t√°c
        """
        try:
            if not request_id or request_id <= 0:
                return {
                    'success': False,
                    'message': 'ID y√™u c·∫ßu kh√¥ng h·ª£p l·ªá'
                }

            success = MaintenanceRepository.delete_maintenance_request(request_id)

            if success:
                return {
                    'success': True,
                    'message': 'ƒê√£ x√≥a y√™u c·∫ßu b·∫£o tr√¨ th√†nh c√¥ng'
                }
            else:
                return {
                    'success': False,
                    'message': 'Kh√¥ng th·ªÉ x√≥a y√™u c·∫ßu b·∫£o tr√¨. Vui l√≤ng th·ª≠ l·∫°i.'
                }

        except Exception as e:
            print(f"‚ùå L·ªói trong MaintenanceService.delete_maintenance_request: {e}")
            return {
                'success': False,
                'message': f'L·ªói h·ªá th·ªëng: {str(e)}'
            }

    @staticmethod
    def filter_by_status(landlord_id: int, status: str) -> List[Dict]:
        """
        L·ªçc y√™u c·∫ßu b·∫£o tr√¨ theo tr·∫°ng th√°i

        Args:
            landlord_id: ID c·ªßa landlord
            status: Tr·∫°ng th√°i c·∫ßn l·ªçc

        Returns:
            List[Dict]: Danh s√°ch y√™u c·∫ßu ƒë√£ l·ªçc
        """
        try:
            if status == "all":
                return MaintenanceService.get_maintenance_list(landlord_id)

            requests = MaintenanceRepository.get_maintenance_requests_by_status(landlord_id, status)
            return [MaintenanceService._format_maintenance_request(req) for req in requests]

        except Exception as e:
            print(f"‚ùå L·ªói trong MaintenanceService.filter_by_status: {e}")
            return []

    @staticmethod
    def filter_by_urgency(landlord_id: int, urgency: str) -> List[Dict]:
        """
        L·ªçc y√™u c·∫ßu b·∫£o tr√¨ theo m·ª©c ƒë·ªô kh·∫©n c·∫•p

        Args:
            landlord_id: ID c·ªßa landlord
            urgency: M·ª©c ƒë·ªô kh·∫©n c·∫•p c·∫ßn l·ªçc

        Returns:
            List[Dict]: Danh s√°ch y√™u c·∫ßu ƒë√£ l·ªçc
        """
        try:
            # Validate input
            if not landlord_id or landlord_id <= 0:
                print("‚ùå Landlord ID kh√¥ng h·ª£p l·ªá")
                return []

            # N·∫øu l·ªçc t·∫•t c·∫£, tr·∫£ v·ªÅ to√†n b·ªô danh s√°ch
            if urgency == "all":
                return MaintenanceService.get_maintenance_list(landlord_id)

            # Validate urgency level
            valid_urgency_levels = ['Kh·∫©n c·∫•p', 'B√¨nh th∆∞·ªùng', 'Th·∫•p']
            if urgency not in valid_urgency_levels:
                print(f"‚ùå M·ª©c ƒë·ªô kh·∫©n c·∫•p kh√¥ng h·ª£p l·ªá: {urgency}")
                return []

            # L·∫•y danh s√°ch y√™u c·∫ßu theo m·ª©c ƒë·ªô kh·∫©n c·∫•p
            requests = MaintenanceRepository.get_maintenance_requests_by_urgency(landlord_id, urgency)

            # Format d·ªØ li·ªáu
            formatted_requests = []
            for request in requests:
                formatted_request = MaintenanceService._format_maintenance_request(request)
                formatted_requests.append(formatted_request)

            print(
                f"‚úÖ L·ªçc ƒë∆∞·ª£c {len(formatted_requests)} y√™u c·∫ßu b·∫£o tr√¨ v·ªõi m·ª©c ƒë·ªô kh·∫©n c·∫•p '{urgency}' cho landlord {landlord_id}")
            return formatted_requests

        except Exception as e:
            print(f"‚ùå L·ªói trong MaintenanceService.filter_by_urgency: {e}")
            return []